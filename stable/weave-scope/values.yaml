# Where defaults exist, the values are set to them here.
# Values with no preferred or common defaults are set to empty strings.
global:
  # global.image: the image that will be used for this release
  image:
    repository: weaveworks/scope
    tag: "1.6.5"
    # global.image.pullPolicy: must be Always, IfNotPresent, or Never
    pullPolicy: "IfNotPresent"
  # global.service.*: the configuration of the service used to access the frontend
  service:
    # global.service.name: the short name desired for the frontend service
    # global.service.name may be specified if you need to use a specific service name, but will be generated if not specified
    # global.service.name is a global so we can access its value easily from the agent subchart
    # name: "weave-scope-app"
    # global.service.port: (required if frontend.enabled == true) the port exposed by the Scope frontend service
    # global.service.port is a global so we can access its value easily from the agent subchart
    port: 80
    # global.service.type: (required if frontend.enabled == true) the type of the frontend service -- must be ClusterIP, NodePort or LoadBalancer
    # global.service.type is a global to keep it with the other values for configuring the frontend service
    type: "ClusterIP"

# weave-scope-frontend.* controls how the Scope frontend is installed
weave-scope-frontend:
  enabled: true
    # weave-scope-frontend.resources.*: controls requests/limits for the frontend
    # weave-scope-frontend.resources.* values are all optional but should not be set to empty values
    # resources:
      # requests:
        # weave-scope-frontend.resources.requests.cpu: CPU req. in MHz (m)
        # cpu: ""
        # weave-scope-frontend.resources.requests.memory: memory req. in MiB (Mi)
        # memory: ""
      # limits:
        # weave-scope-frontend.resources.limits.cpu: CPU limit in MHz (m)
        # cpu: ""
        # weave-scope-frontend.resources.limits.memory: memory limit in MiB (Mi)
        # memory: ""

# weave-scope-agent.* controls how the Weave Scope node agent pods are installed
weave-scope-agent:
  enabled: true
  # weave-scope-agent.dockerBridge: (required if agent.enabled == true) the name of the Docker bridge interface
  dockerBridge: "docker0"
  # weave-scope-agent.scopeFrontendAddr: the host:port of a Scope frontend to send data to
  # weave-scope-agent.scopeFrontendAddr is only needed for some cases where the frontend is deployed separately from the agent
  scopeFrontendAddr: ""
  # weave-scope-agent.probeToken: the token used to connect to Weave Cloud
  # weave-scope-agent.probeToken is not needed for connecting to non-cloud Scope frontends
  probeToken: ""
  # weave-scope-agent.rbac.*: controls RBAC resource creation/use
  rbac:
    # weave-scope-agent.rbac.create: whether RBAC resources should be created
    # weave-scope-agent.rbac.create *must* be set to false if RBAC is not enabled in the cluster
    # weave-scope-agent.rbac.create *may* be set to false in an RBAC-enabled cluster to allow for external management of RBAC
    create: true
  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    # name: "weave-scope"
  # weave-scope-agent.resources.*: controls requests/limits for the agent
  # weave-scope-agent.resources.* values are all optional but should not be set to empty values
  # resources:
    # requests:
      # weave-scope-agent.resources.requests.cpu: CPU req. in MHz (m)
      # cpu: ""
      # weave-scope-agent.resources.requests.memory: memory req. in MiB (Mi)
      # memory: ""
    # limits:
      # weave-scope-agent.resources.limits.cpu: CPU limit in MHz (m)
      # cpu: ""
      # weave-scope-agent.resources.limits.memory: memory limit in MiB (Mi)
      # memory: ""
