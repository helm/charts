{{- if and (.Values.flower.enabled) (eq .Values.airflow.executor "CeleryExecutor") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "airflow.fullname" . }}-flower
  {{- if .Values.flower.annotations }}
  annotations:
    {{- toYaml .Values.flower.annotations | nindent 4 }}
  {{- end }}
  labels:
    app: {{ include "airflow.labels.app" . }}
    component: flower
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- if .Values.flower.labels }}
    {{- toYaml .Values.flower.labels | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ include "airflow.labels.app" . }}
      component: flower
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config-env: {{ include (print $.Template.BasePath "/configmap-env.yaml") . | sha256sum }}
        {{- if .Values.flower.podAnnotations }}
        {{- toYaml .Values.flower.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        app: {{ include "airflow.labels.app" . }}
        component: flower
        release: {{ .Release.Name }}
        {{- if .Values.flower.podLabels }}
        {{- toYaml .Values.flower.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.airflow.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.airflow.image.pullSecret }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.flower.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.flower.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.flower.affinity }}
      affinity:
        {{- toYaml .Values.flower.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.flower.tolerations }}
      tolerations:
        {{- toYaml .Values.flower.tolerations | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "airflow.serviceAccountName" . }}
      {{- if .Values.flower.securityContext }}
      securityContext:
        {{- toYaml .Values.flower.securityContext | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-flower
          image: {{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}
          imagePullPolicy: {{ .Values.airflow.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: "{{ include "airflow.fullname" . }}-env"
          env:
            {{- include "airflow.mapenvsecrets" . | indent 12 }}
          ports:
            - name: flower
              containerPort: 5555
              protocol: TCP
          {{- if .Values.flower.extraConfigmapMounts }}
          volumeMounts:
            {{- range .Values.flower.extraConfigmapMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
          {{- end }}
          command:
            - "/usr/bin/dumb-init"
            - "--"
          args:
            - "bash"
            - "-c"
            - >
              true \
              {{- if gt .Values.flower.initialStartupDelay 0.0 }}
               && echo "*** waiting {{ .Values.flower.initialStartupDelay }}s..." \
               && sleep {{ .Values.flower.initialStartupDelay }} \
              {{- end }}
               && mkdir -p /home/airflow/.local/bin \
               && echo 'export PATH="/home/airflow/.local/bin:$PATH"' >> /home/airflow/airflow_env.sh \
               && echo 'export AIRFLOW__CORE__SQL_ALCHEMY_CONN="{{ include "airflow.connection.alchemy" . }}"' >> /home/airflow/airflow_env.sh \
               && echo 'export AIRFLOW__CELERY__RESULT_BACKEND="{{ include "airflow.connection.celery.backend" . }}"' >> /home/airflow/airflow_env.sh \
               && echo 'export AIRFLOW__CELERY__BROKER_URL="{{ include "airflow.connection.celery.broker" . }}"' >> /home/airflow/airflow_env.sh \
               && echo 'source /home/airflow/airflow_env.sh' >> /home/airflow/.profile \
               && echo 'source /home/airflow/airflow_env.sh' >> /home/airflow/.bashrc \
               && source /home/airflow/airflow_env.sh \
               && echo "*** running flower..." \
               && exec airflow flower
          livenessProbe:
            {{- if and (.Values.flower.basicAuthSecret) (not .Values.airflow.config.AIRFLOW__CELERY__FLOWER_BASIC_AUTH) }}
            exec:
              command:
                - /bin/sh
                - -c
                - "curl -H 'Authorization: Basic $(echo -n $AIRFLOW__CELERY__FLOWER_BASIC_AUTH | base64)' 'http://localhost:5555
                  {{- if .Values.ingress.flower.livenessPath -}}
                  {{ .Values.ingress.flower.livenessPath }}
                  {{- else -}}
                  {{ .Values.ingress.flower.path }}/
                  {{- end -}}
                  '"
            {{- else }}
            httpGet:
              {{- if .Values.ingress.flower.livenessPath }}
              path: "{{ .Values.ingress.flower.livenessPath }}"
              {{- else }}
              path: "{{ .Values.ingress.flower.path }}/"
              {{- end }}
              port: flower
              {{- if .Values.airflow.config.AIRFLOW__CELERY__FLOWER_BASIC_AUTH }}
              httpHeaders:
                - name: Authorization
                  value: Basic {{ .Values.airflow.config.AIRFLOW__CELERY__FLOWER_BASIC_AUTH | b64enc }}
              {{- end }}
            {{- end }}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.flower.resources | nindent 12 }}
      {{- if .Values.flower.extraConfigmapMounts }}
      volumes:
        {{- range .Values.flower.extraConfigmapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMap }}
        {{- end }}
      {{- end }}
{{- end }}
