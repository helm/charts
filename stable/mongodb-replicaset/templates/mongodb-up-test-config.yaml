apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-tests
  labels:
    app: {{ template "fullname" . }}-tests
data:
  mongo-up-test.sh: |
    pod_name() {
      echo {{ template "fullname" . }}-$1.{{ template "fullname" . }}.default.svc.cluster.local
    }

    master_pod() {
      for i in {0..2}
      do
        response=$(mongo \
            --host=$(pod_name $i) \
            --eval="rs.isMaster().ismaster")
        if [[ $response =~ "true" ]]; then
          echo $(pod_name $i)
          break
        fi
      done
    }

    setup() {
        ready=0
        until [[ $ready -eq 3 ]];
        do
         echo "Waiting for application to become ready" >&2
         sleep 1
         ready=0

         for i in {0..2}
          do
            response=$(mongo \
                --host=$(pod_name $i) \
                --eval="rs.status()") || true
            if [[ $response =~ .*ok.* ]]; then
              ready=$((ready+1))
            fi
          done
        done
    }

    @test "Testing mongodb client is accessible" {
      mongo -h
      [ "$?" -eq 0 ]
    }

    @test "Connect mongodb client to mongodb pods" {
      for i in {0..2}
      do
        response=$(mongo \
            --host=$(pod_name $i) \
            --eval="rs.status()")
        if [[ ! $response =~ .*ok.* ]]; then
          exit 1
        fi
      done
    }

    @test "Write key to master" {
      response=$(mongo \
          --host=$(master_pod) \
          --eval="db.test.insert({\"abc\": \"def\"}).nInserted")
      if [[ ! $response =~ "1" ]]; then
        exit 1
      fi
    }

    @test "Read key from slaves" {
      # wait for slaves to catch up
      sleep 10

      for i in {0..2}
      do
        response=$(mongo \
          --host=$(pod_name $i) \
          --eval="rs.slaveOk(); db.test.find({\"abc\":\"def\"})")
        if [[ ! $response =~ .*def.* ]]; then
          exit 1
        fi
      done
    }
