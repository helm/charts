replicaSet: rs0
replicas: 3
port: 27017

auth:
  enabled: false
  # adminUser: username
  # adminPassword: password
  # key: keycontent
  # existingKeySecret:
  # existingAdminSecret:

# Specs for the Docker image for the init container that establishes the replica set
installImage:
  name: gcr.io/google_containers/mongodb-install
  tag: 0.5
  pullPolicy: IfNotPresent

# Specs for the MongoDB image
image:
  name: mongo
  tag: 3.4
  pullPolicy: IfNotPresent

# Annotations to be added to MongoDB pods
podAnnotations: {}

podAntiAffinity: "soft"

resources: {}
# limits:
#   cpu: 500m
#   memory: 512Mi
# requests:
#   cpu: 100m
#   memory: 256Mi

persistentVolume:
  enabled: true
  ## mongodb-replicaset data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}

# Annotations to be added to the service
serviceAnnotations: {}

tls:
  # Enable or disable MongoDB TLS support
  enabled: false
  # Please generate your own TLS CA by generating it via:
  # $ openssl genrsa -out ca.key 2048
  # $ openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj "/CN=mydomain.com"
  # After that you can base64 encode it and paste it here:
  # $ cat ca.key | base64 -w0
  # cacert:
  # cakey:

# Entries for the MongoDB config file
configmap:
  storage:
    dbPath: /data/db
  net:
    port: 27017
    # Uncomment for TLS support
    # ssl:
    #   mode: requireSSL
    #   CAFile: /ca/tls.crt
    #   PEMKeyFile: /work-dir/mongo.pem
  replication:
    replSetName: rs0
  # Uncomment for TLS support or keyfile access control without TLS
  # security:
  #   authorization: enabled
  #   keyFile: /keydir/key.txt
