{{- if eq .Values.mode "standalone" }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "minio.fullname" . }}
  labels:
    app: {{ template "minio.name" . }}
    chart: {{ template "minio.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: {{ .Values.DeploymentUpdate.type }}
    {{- if eq .Values.DeploymentUpdate.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.DeploymentUpdate.maxSurge }}
      maxUnavailable: {{ .Values.DeploymentUpdate.maxUnavailable }}
    {{- else }}
    rollingUpdate: null
    {{- end}}
  {{- if .Values.gateway.enabled }}
  replicas: {{ .Values.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "minio.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ template "minio.fullname" . }}
      labels:
        app: {{ template "minio.name" . }}
        release: {{ .Release.Name }}
  {{- if .Values.podLabels }}
  {{ toYaml .Values.podLabels | indent 8 }}
  {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
  {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
  {{- end }}
      serviceAccountName: {{ include "minio.serviceAccountName" . | quote }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.gateway.enabled  }}
          {{- if eq .Values.gateway.type "s3" }}
          command: [ "/bin/sh",
          "-ce",
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} gateway s3 {{ .Values.gateway.s3.serviceEndpoint }}" ]
          {{- end }}
          {{- if eq .Values.gateway.type "azure" }}
          command: [ "/bin/sh", 
          "-ce", 
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} gateway azure" ]
          {{- end }}
          {{- if eq .Values.gateway.type "gcs" }}
          command: [ "/bin/sh", 
          "-ce", 
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} gateway gcs {{ .Values.gateway.gcs.projectId }}" ]
          {{- end }}
          {{- if eq .Values.gateway.type "oss" }}
          command: [ "/bin/sh", 
          "-ce", 
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} gateway oss {{ .Values.gateway.oss.endpointURL }}" ]
          {{- end }}
          {{- if eq .Values.gateway.type "nas" }}
          command: [ "/bin/sh", 
          "-ce", 
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} gateway nas {{ .Values.mountPath }}" ]
          {{- end }}
          {{- else }}
          command: [ "/bin/sh", 
          "-ce", 
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} server {{ .Values.mountPath }}" ]
          {{- end }}
          volumeMounts:
            {{- if or .Values.persistence.enabled .Values.gateway.enabled }}
            - name: export
              mountPath: {{ .Values.mountPath }}
              {{- if .Values.persistence.subPath }}
              subPath: "{{ .Values.persistence.subPath }}"
              {{- end }}
            {{- end }}
            {{- if eq .Values.gateway.type "gcs" }}
            - name: minio-user
              mountPath: "/etc/credentials"
              readOnly: true
            {{- end }}
            - name: minio-config-dir
              mountPath: {{ .Values.configPath }}
            {{- if .Values.tls.enabled }}
            - name: cert-secret-volume
              mountPath: {{ .Values.configPath }}certs
            {{ end }}
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
                  key: secretkey
            {{- if eq .Values.gateway.type "gcs" }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/gcs_key.json"
            {{- end }}
            {{- if .Values.gateway.enabled }}
            - name: MINIO_CACHE_DRIVES
              {{- if and .Values.persistence.enabled .Values.persistence.subPath }}
              value: {{ printf "\"%s/%s\"" .Values.mountPath .Values.persistence.subPath  }}
              {{ else }}
              value: {{ .Values.mountPath | quote }}
              {{- end }}
            {{- end }}
            {{- range $key, $val := .Values.environment }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end}}
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: service
              {{- if .Values.tls.enabled }}
              scheme: HTTPS
              {{ else }}
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              {{- if .Values.tls.enabled }}
              scheme: HTTPS
              {{- end }}
              path: /minio/health/ready
              port: service
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      volumes:
        - name: export
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "minio.fullname" .) }}
        {{- else }}
          emptyDir:
            sizeLimit: {{ .Values.gateway.emptyDirSize }}
        {{- end }}
        - name: minio-user
          secret:
            secretName: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
        - name: minio-config-dir
          emptyDir: {}
        {{- if .Values.tls.enabled }}
        - name: cert-secret-volume
          secret:
            secretName: {{ .Values.tls.certSecret }}
            items:
            - key: {{ .Values.tls.publicCrt }}
              path: public.crt
            - key: {{ .Values.tls.privateKey }}
              path: private.key
            - key: {{ .Values.tls.publicCrt }}
              path: CAs/public.crt
        {{ end }}
{{- end }}
