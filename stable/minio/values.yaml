## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
## minio server mode, i.e. standalone or distributed.
## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
##
image: "minio/minio"
imageTag: "RELEASE.2017-02-16T01-47-30Z"
imagePullPolicy: "Always"
mode: "standalone"

## Set default accesskey, secretkey, Minio config file path, volume mount path and
## number of nodes (only used for Minio distributed mode)
## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
##
accessKey: "AKIAIOSFODNN7EXAMPLE"
secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
configPath: ""
mountPath: "/export"
replicas: 4

## loadBalancerIP for the Minio Service (optional, cloud specific)
## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
##
# minioLoadBalancerIP:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true

  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  ##
  # storageClass: <storageClass>
  accessMode: ReadWriteOnce
  size: 10Gi

## Expose the Minio service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
serviceType: LoadBalancer
servicePort: 9000

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 256Mi
    cpu: 250m

## Minio config file is stored in configPath (if available) or at ~/.minio/config.json
## This file holds the details like server version, credentials. It can also be used to
## setup bucket notifications as explained here. https://docs.minio.io/docs/minio-bucket-notification-guide
##
minio_server_config:
  config.json: |
    {
    	"version": "13",
    	"credential": {
    		"accessKey": "AKIAIOSFODNN7EXAMPLE",
    		"secretKey": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    	},
    	"region": "us-east-1",
    	"logger": {
    		"console": {
    			"enable": true,
    			"level": "fatal"
    		},
    		"file": {
    			"enable": false,
    			"fileName": "",
    			"level": ""
    		}
    	},
    	"notify": {
    		"amqp": {
    			"1": {
    				"enable": false,
    				"url": "",
    				"exchange": "",
    				"routingKey": "",
    				"exchangeType": "",
    				"mandatory": false,
    				"immediate": false,
    				"durable": false,
    				"internal": false,
    				"noWait": false,
    				"autoDeleted": false
    			}
    		},
    		"nats": {
    			"1": {
    				"enable": false,
    				"address": "",
    				"subject": "",
    				"username": "",
    				"password": "",
    				"token": "",
    				"secure": false,
    				"pingInterval": 0,
    				"streaming": {
    					"enable": false,
    					"clusterID": "",
    					"clientID": "",
    					"async": false,
    					"maxPubAcksInflight": 0
    				}
    			}
    		},
    		"elasticsearch": {
    			"1": {
    				"enable": false,
    				"url": "",
    				"index": ""
    			}
    		},
    		"redis": {
    			"1": {
    				"enable": false,
    				"address": "",
    				"password": "",
    				"key": ""
    			}
    		},
    		"postgresql": {
    			"1": {
    				"enable": false,
    				"connectionString": "",
    				"table": "",
    				"host": "",
    				"port": "",
    				"user": "",
    				"password": "",
    				"database": ""
    			}
    		},
    		"kafka": {
    			"1": {
    				"enable": false,
    				"brokers": null,
    				"topic": ""
    			}
    		},
    		"webhook": {
    			"1": {
    				"enable": false,
    				"endpoint": ""
    			}
    		}
    	}
    }
