apiVersion: v1
kind: Secret
metadata:
  name: {{ template "consul.fullname" . }}-gossip-key
type: Opaque
data:
  gossip-key: {{ randAlphaNum 24 | b64enc }}
---
{{- if .Values.uiService.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ template "consul.fullname" . }}-ui"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
spec:
  ports:
  - name: http
    port: {{ .Values.HttpPort }}
  selector:
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
  type: "{{ .Values.uiService.type }}"
{{- end }}
---
{{- if .Values.maxUnavailable }}
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "{{ template "consul.fullname" . }}-pdb"
spec:
  maxUnavailable: {{ .Values.maxUnavailable }}
  selector:
    matchLabels:
      component: "{{ .Release.Name }}-{{ .Values.Component }}"
{{- end }}
---
{{- if .Values.uiIngress.enabled -}}
{{- $releaseName := .Release.Name -}}
{{- $servicePort := .Values.HttpPort -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
  {{- range $key, $value := .Values.uiIngress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
  name: "{{ template "consul.fullname" . }}-ui"
spec:
  rules:
  {{- range .Values.uiIngress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - backend:
              serviceName: {{ printf "%s-%s" $releaseName "consul-ui" | trunc 63 }}
              servicePort: {{ $servicePort }}
  {{- end -}}
  {{- if .Values.uiIngress.tls }}
  tls:
{{ toYaml .Values.uiIngress.tls | indent 4 }}
  {{- end -}}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ template "consul.fullname" . }}"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: http
    port: {{ .Values.HttpPort }}
  - name: rpc
    port: {{ .Values.RpcPort }}
  - name: serflan-tcp
    protocol: "TCP"
    port: {{ .Values.SerflanPort }}
  - name: serflan-udp
    protocol: "UDP"
    port: {{ .Values.SerflanUdpPort }}
  - name: serfwan-tcp
    protocol: "TCP"
    port: {{ .Values.SerfwanPort }}
  - name: serfwan-udp
    protocol: "UDP"
    port: {{ .Values.SerfwanUdpPort }}
  - name: server
    port: {{.Values.ServerPort}}
  - name: consuldns-tcp
    port: {{.Values.ConsulDnsPort}}
  - name: consuldns-udp
    protocol: "UDP"
    port: {{.Values.ConsulDnsPort}}
  clusterIP: None
  selector:
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "consul.fullname" . }}"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-{{ .Values.Component }}"
spec:
  serviceName: "{{ template "consul.fullname" . }}"
  replicas: {{ default 3 .Values.Replicas }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: "{{ template "consul.fullname" . }}"
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        component: "{{ .Release.Name }}-{{ .Values.Component }}"
    spec:
      securityContext:
        fsGroup: 1000
      {{- if eq .Values.antiAffinity "hard" }}
      affinity:
        {{- if .Values.nodeAffinity }}
        nodeAffinity:
{{ toYaml .Values.nodeAffinity | indent 10 }}
        {{- end }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - "{{ .Release.Name }}-{{ .Values.Component }}"
            topologyKey: kubernetes.io/hostname
      {{- else if eq .Values.antiAffinity "soft" }}
      affinity:
        {{- if .Values.nodeAffinity }}
        nodeAffinity:
{{ toYaml .Values.nodeAffinity | indent 10 }}
        {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - "{{ .Release.Name }}-{{ .Values.Component }}"
      {{- end }}
      containers:
      - name: "{{ template "consul.fullname" . }}"
        image: "{{ .Values.Image }}:{{ .Values.ImageTag }}"
        imagePullPolicy: "{{ .Values.ImagePullPolicy }}"
        ports:
        - name: http
          containerPort: {{ .Values.HttpPort }}
        - name: rpc
          containerPort: {{ .Values.RpcPort }}
        - name: serflan-tcp
          protocol: "TCP"
          containerPort: {{ .Values.SerflanPort }}
        - name: serflan-udp
          protocol: "UDP"
          containerPort: {{ .Values.SerflanUdpPort }}
        - name: serfwan-tcp
          protocol: "TCP"
          containerPort: {{ .Values.SerfwanPort }}
        - name: serfwan-udp
          protocol: "UDP"
          containerPort: {{ .Values.SerfwanUdpPort }}
        - name: server
          containerPort: {{.Values.ServerPort}}
        - name: consuldns-tcp
          containerPort: {{.Values.ConsulDnsPort}}
        - name: consuldns-udp
          protocol: "UDP"
          containerPort: {{.Values.ConsulDnsPort}}
        resources:
{{ toYaml .Values.Resources | indent 10 }}
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: {{ default 3 .Values.Replicas | quote }}
        - name: STATEFULSET_NAME
          value: "{{ template "consul.fullname" . }}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DNSPORT
          value: "{{ .Values.ConsulDnsPort }}"
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/consul
        - name: gossip-key
          mountPath: /etc/consul/secrets
          readOnly: true
        livenessProbe:
          exec:
            command:
            - consul
            - members
          initialDelaySeconds: 300
          timeoutSeconds: 5
        command:
          - "/bin/sh"
          - "-ec"
          - |
            IP=$(hostname -i)

            {{- if .Values.EncryptGossip }}
            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi
            {{- end }}

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                    ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              NEXT_PEER="$(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')"
              if [ "${NEXT_PEER}" != "${POD_IP}" ]; then
                PEERS="${PEERS}${PEERS:+ } -retry-join ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc"
              fi
            done

            exec /bin/consul agent \
            {{- if .Values.uiService.enabled }}
              -ui \
            {{- end }}
            {{- if .Values.DisableHostNodeId }}
              -disable-host-node-id \
            {{- end }}
            {{- if .Values.DatacenterName }}
              -datacenter {{ .Values.DatacenterName }} \
            {{- end }}
              -data-dir=/var/lib/consul \
              -server \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -disable-keyring-file \
              -bind=0.0.0.0 \
              -advertise=${IP} \
              ${PEERS} \
            {{- if .Values.EncryptGossip }}
              ${GOSSIP_KEY} \
            {{- end }}
              -client=0.0.0.0 \
              -dns-port=${DNSPORT} \
              -http-port={{ .Values.HttpPort }}
      volumes:
      - name: gossip-key
        secret:
          secretName: {{ template "consul.fullname" . }}-gossip-key
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "{{ .Values.Storage }}"
    {{- if .Values.StorageClass }}
    {{- if (eq "-" .Values.StorageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.StorageClass }}"
    {{- end }}
    {{- end }}
