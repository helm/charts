{{- if .Values.controller.create -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sealed-secrets.fullname" . }}
  namespace: {{ template "sealed-secrets.namespace" . }}
  labels:
    app.kubernetes.io/name: {{ template "sealed-secrets.name" . }}
    helm.sh/chart: {{ template "sealed-secrets.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "sealed-secrets.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ template "sealed-secrets.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "sealed-secrets.serviceAccountName" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      containers:
        - name: {{ template "sealed-secrets.fullname" . }}
          command:
            - controller
          args:
            - "--key-prefix"
            - "{{ .Values.secretName }}"
            {{- range $value := .Values.commandArgs }}
            - {{ $value | quote }}
            {{- end }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          securityContext:
            readOnlyRootFilesystem: true
            {{- if .Values.securityContext.runAsUser }}
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- if .Values.securityContext.fsGroup }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      volumes:
      - name: tmp
        emptyDir: {}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
