The nginx-ingress controller has been installed.

{{- $root := . -}}
{{- range .Values.controller.services }}
{{- if contains "NodePort" .type }}
Get the application URL by running these commands:
  export NODE_PORT=$(kubectl --namespace {{ $root.Release.Namespace }} get services -o jsonpath="{.spec.ports[0].nodePort}" {{ template "fullname" $root }}-{{ .name }})
  export NODE_IP=$(kubectl --namespace {{ $root.Release.Namespace }} get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Visit http://$NODE_IP:$NODE_PORT to access your application."
{{- else if contains "LoadBalancer" .type }}
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace {{ $root.Release.Namespace }} get services -o wide -w {{ template "fullname" $root }}-{{ .name }}'
{{- else if contains "ClusterIP"  .type }}
Get the application URL by running these commands:
  export POD_NAME=$(kubectl --namespace {{ $root.Release.Namespace }} get pods -o jsonpath="{.items[0].metadata.name}" -l "app={{ template "name" $root }},component={{ $root.Values.controller.name }},release={{ $root.Release.Name }}")
  kubectl --namespace {{ $root.Release.Namespace }} port-forward $POD_NAME {{ $root.containerPort }}:{{ $root.containerPort }}
  echo "Visit http://127.0.0.1:{{ $root.containerPort }} to access your application."
{{- end }}
{{- end }}

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls
