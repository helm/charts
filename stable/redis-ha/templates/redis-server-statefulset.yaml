apiVersion: v1
kind: Service
metadata:
  name: {{ template "redis-ha.fullname" . }}-server-svc
  labels:
    redis-role: "node"
{{ include "labels.standard" . | indent 4 }}
  {{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
  {{- end }}
  annotations:
{{ toYaml .Values.servers.annotations | indent 4 }}
spec:
  selector:
    redis-node: "true"
{{ include "labels.standard" . | indent 4 }}
  type: "{{ .Values.servers.serviceType }}"
  clusterIP: None
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  # Pay attention to the redis-role label at runtime. The self-determination logic in the image sets this value accordingly.
  name: {{ template "redis-ha.fullname" . }}-server
  labels:
    name: {{ template "redis-ha.fullname" . }}-server
    redis-node: "true"
{{ include "labels.standard" . | indent 4 }}
  {{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "redis-ha.fullname" . }}-server-svc
  replicas: {{ .Values.replicas.servers }}
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        name: {{ template "redis-ha.fullname" . }}-server
        redis-node: "true"
{{ include "labels.standard" . | indent 8 }}
      {{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 8 }}
      {{- end }}
    spec:
      {{ if .Values.rbac.create }}
      serviceAccountName: {{ template "redis-ha.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.affinity.servers }}
      affinity:
{{ toYaml .Values.affinity.servers | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
      - name: redis
        image: {{ .Values.image }}
        livenessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
{{ toYaml .Values.resources.server | indent 10 }}
        env:
          - name: MAX_MEMORY
            value: {{ .Values.redis.maxMemory }}
          - name: MAX_MEMORY_POLICY
            value: {{ .Values.redis.maxMemoryPolicy }}
          - name: RDB_BACKUPS
            value: {{ .Values.redis.rdbBackups | quote }}
          - name: DISKLESS_REPLICATION
            value: {{ .Values.redis.disklessReplication | quote }}
          - name: REDIS_SENTINEL_SERVICE_HOST
            value: "redis-sentinel"
          - name: REDIS_CHART_PREFIX
            value: {{ template "redis-ha.fullname" . }}-
        ports:
          - containerPort: 6379
        volumeMounts:
          - mountPath: /redis-master-data
            name: data
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
      {{- range $key, $value := .Values.persistentVolume.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.persistentVolume.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolume.size | quote }}
    {{- if .Values.persistentVolume.storageClass }}
    {{- if (eq "-" .Values.persistentVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- end }}
{{- else }}
      volumes:
      - name: data
        emptyDir: {}
{{- end }}
