apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "traefik.fullname" . }}
  labels:
    app: {{ template "traefik.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  traefik.toml: |
    # traefik.toml
    logLevel = "INFO"
    {{- if .Values.debug.enabled }}
    debug = true
    {{- end }}
    {{- if .Values.sendAnonymousUsage }}
    sendAnonymousUsage = true
    {{- end }}
    {{- if .Values.ssl.insecureSkipVerify }}
    InsecureSkipVerify = true
    {{- end }}
    {{- if .Values.ssl.enabled }}
    defaultEntryPoints = ["http","https"]
    {{- else }}
    defaultEntryPoints = ["http", "httpn"]
    {{- end }}
    [entryPoints]
      [entryPoints.http]
      address = ":80"
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.http.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      compress = {{ .Values.gzip.enabled }}
        {{- if .Values.ssl.enforced }}
        [entryPoints.http.redirect]
          regex = "^http://(.*)"
          replacement = "https://$1"
        {{- end }}
      {{- if .Values.ssl.enabled }}
      [entryPoints.https]
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      address = ":443"
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.https.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      compress = {{ .Values.gzip.enabled }}
        [entryPoints.https.tls]
          [[entryPoints.https.tls.certificates]]
          CertFile = "/ssl/tls.crt"
          KeyFile = "/ssl/tls.key"
      {{- else }}
      [entryPoints.httpn]
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      address = ":8880"
      compress = {{ .Values.gzip.enabled }}
      {{- end }}
    [kubernetes]
    {{- if .Values.kubernetes}}
      {{- if .Values.kubernetes.namespaces }}
    namespaces = [
        {{- range $idx, $element := .Values.kubernetes.namespaces }}
            {{- if $idx }}, {{ end }}
            {{- $element | quote }}
        {{- end -}}
        ]
      {{- end}}
      {{- if .Values.kubernetes.labelSelector }}
    labelselector = {{ .Values.kubernetes.labelSelector | quote }}
      {{- end}}
    {{- end}}
    {{- if .Values.accessLogs.enabled }}
    [accessLog]
    {{- if .Values.accessLogs.filePath }}
    filePath = "{{ .Values.accessLogs.filePath }}"
    {{- end}}
    format = "{{ .Values.accessLogs.format }}"
    {{- end}}
    {{- if .Values.acme.enabled }}
    [acme]
    email = "{{ .Values.acme.email }}"
    storage = "/acme/acme.json"
    entryPoint = "https"
    onHostRule = true
    {{- if .Values.acme.staging }}
    caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
    {{- end }}
    {{- if .Values.acme.logging }}
    acmeLogging = true
    {{- end }}
    {{- if eq .Values.acme.challengeType "dns-01" }}
      [acme.dnsChallenge]
      provider = "{{ .Values.acme.dnsProvider.name }}"
    {{- else if eq .Values.acme.challengeType "http-01" }}
      [acme.httpChallenge]
      entryPoint = "http"
    {{- end }}
    {{- end }}
    {{- if or .Values.dashboard.enabled .Values.metrics.prometheus.enabled .Values.metrics.statsd.enabled .Values.metrics.datadog.enabled }}
    [web]
    address = ":8080"
    {{- end }}
    {{- if .Values.dashboard.enabled }}
      {{- if .Values.dashboard.auth }}
      {{- if .Values.dashboard.auth.basic }}
      [web.auth.basic]
        users = [{{ range $key, $value := .Values.dashboard.auth.basic }}"{{ $key }}:{{ $value }}",{{ end }}]
      {{- end}}
      {{- end}}
      {{- if .Values.dashboard.statistics }}
      {{- if .Values.dashboard.statistics.recentErrors }}
      [web.statistics]
        RecentErrors = {{ .Values.dashboard.statistics.recentErrors }}
      {{- end}}
      {{- end}}
    {{- end }}
    {{- if .Values.metrics.prometheus.enabled }}
    [web.metrics.prometheus]
      {{- if .Values.metrics.prometheus.buckets }}
      buckets = [
        {{- range $idx, $element := .Values.metrics.prometheus.buckets }}
            {{- if $idx }},{{ end }}
            {{- printf "%.1f" $element }}
        {{- end -}}
        ]
        {{- end -}}
    {{- end }}
    {{- if .Values.metrics.datadog.enabled }}
    [web.metrics.datadog]
      {{- if .Values.metrics.datadog.address }}
      address = {{ .Values.metrics.datadog.address | quote }}
      {{- end}}
      {{- if .Values.metrics.datadog.pushinterval }}
      pushinterval = {{ .Values.metrics.datadog.pushinterval | quote }}
      {{- end}}
    {{- end }}
    {{- if .Values.metrics.statsd.enabled }}
    [web.metrics.statsd]
      {{- if .Values.metrics.statsd.address }}
      address = {{ .Values.metrics.statsd.address | quote }}
      {{- end}}
      {{- if .Values.metrics.statsd.pushinterval }}
      pushinterval = {{ .Values.metrics.statsd.pushinterval | quote }}
      {{- end}}
    {{- end }}
