{{- $deDup :=  dict }}
{{- /* deduplication logic to ensure one one cache PVC is created per unique componentName */}}
{{- if .Values.agent.enabled }}
  {{- if .Values.agent.cache.enabled }}
    {{- $_ := set $deDup (tpl (.Values.agent.cache.componentName | required "cache componentName is required") $) .Values.agent.cache }}
  {{- end }}
  {{- if .Values.additionalAgents }}
    {{- $agent := .Values.agent }}
    {{- range $name, $additionalAgent := .Values.additionalAgents }}
      {{- /* merge original .Values.agent into additional agent to ensure it at least has the default values */}}
      {{- $additionalAgent := merge $additionalAgent $agent }}
      {{- if $additionalAgent.cache.enabled }}
        {{- $_ := set $deDup (tpl ($additionalAgent.cache.componentName | required "cache componentName is required") $) $additionalAgent.cache }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- /* render unique list of cache PVCs */}}
  {{- range $name, $agentcache := $deDup }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ tpl ($agentcache.componentName | required "cache componentName is required") $ }}
  annotations:
    "helm.sh/resource-policy": delete
  labels:
    "app.kubernetes.io/name": '{{ template "jenkins.name" $ }}'
    "helm.sh/chart": "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    "app.kubernetes.io/managed-by": "{{ $.Release.Service }}"
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/component": "{{ $.Values.master.componentName }}"
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: {{ $agentcache.size | required "size is required" }}
  storageClassName: {{ $agentcache.storageClass | default "" }}
  {{- end }}
{{- end }}
