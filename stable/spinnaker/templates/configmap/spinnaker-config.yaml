apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-spinnaker-config
  labels:
    app: {{ template "fullname" . }}
data:
  clouddriver.yml: |
    server:
      port: ${services.clouddriver.port:7002}
      address: ${services.clouddriver.host:localhost}

    redis:
      connection: ${services.redis.connection:redis://localhost:6379}

    udf:
      # Controls whether UserDataProviders are used to populate user data of new
      # server groups. If false, user data is copied over from ancestor server
      # groups on both CopyLastAsgAtomicOperation and
      # ModifyAsgLaunchConfigurationOperation (only if no user data is provided
      # on the given request).
      enabled: ${services.clouddriver.aws.udf.enabled:true}

    default:
      account:
        env: ${providers.aws.primaryCredentials.name}

    aws:
      # AWS Credentials are passed either as environment variables or through
      # a standard AWS file $HOME/.aws/credentials
      # See providers.aws.primaryCredentials in spinnaker.yml for more
      # info on setting environment variables.
      enabled: ${providers.aws.enabled:false}
      defaults:
        iamRole: ${provider.aws.defaultIAMRole:BaseIAMRole}
      defaultRegions:
        - name: ${providers.aws.defaultRegion:us-east-1}
      defaultFront50Template: ${services.front50.baseUrl}
      defaultKeyPairTemplate: ${providers.aws.defaultKeyPairTemplate}

    azure:
      enabled: ${providers.azure.enabled:false}

      accounts:
        - name: ${providers.azure.primaryCredentials.name}
          clientId: ${providers.azure.primaryCredentials.clientId}
          appKey: ${providers.azure.primaryCredentials.appKey}
          tenantId: ${providers.azure.primaryCredentials.tenantId}
          subscriptionId: ${providers.azure.primaryCredentials.subscriptionId}

    google:
      enabled: ${providers.google.enabled:false}

      accounts:
        - name: ${providers.google.primaryCredentials.name}
          project: ${providers.google.primaryCredentials.project}
          jsonPath: ${providers.google.primaryCredentials.jsonPath}

    cf:
      enabled: ${providers.cf.enabled:false}

      accounts:
        - name: ${providers.cf.primaryCredentials.name}
          api: ${providers.cf.primaryCredentials.api}
          console: ${providers.cf.primaryCredentials.console}
          org: ${providers.cf.defaultOrg}
          space: ${providers.cf.defaultSpace}
          username: ${providers.cf.account.name:}
          password: ${providers.cf.account.password:}

    kubernetes:
      enabled: ${providers.kubernetes.enabled:false}
      accounts:
        - name: ${providers.kubernetes.primaryCredentials.name}
          serviceAccount: true
          dockerRegistries:
          {{- range $index, $account := .Values.accounts }}
          - accountName: {{ $account.name }}
          {{ end }}

    dockerRegistry:
      {{ if .Values.accounts }}
      enabled: true
      accounts:
        {{- range $index, $account := .Values.accounts }}
        - name: {{ $account.name }}
          address: {{ $account.address }}
          {{- if $account.username }}
          username: {{ $account.username }}
          email: {{ $account.email }}
          {{- end }}
          {{- if $account.password }}
          passwordFile: /tmp/registry/password-{{ $account.name }}
          {{- end }}
          {{- if $account.repositories }}
          repositories:
            {{- range $index, $repo := $account.repositories }}
            - {{ $repo }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{ else }}
      enabled: false
      {{ end }}

    credentials:
      primaryAccountTypes: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}
      challengeDestructiveActionsEnvironments: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}

  echo.yml: |
{{.Files.Get "config/echo.yml" | indent 4}}
  echo-local.yml: |
{{.Files.Get "config/echo-local.yml" | indent 4}}
  fiat.yml: |
{{.Files.Get "config/fiat.yml" | indent 4}}
  fiat.yml-local: |
{{.Files.Get "config/fiat-local.yml" | indent 4}}
  front50.yml: |
{{.Files.Get "config/front50.yml" | indent 4}}
  front50-local.yml: |
{{.Files.Get "config/front50-local.yml" | indent 4}}
  gate.yml: |
    server:
      port: ${services.gate.port:8084}
      address: 0.0.0.0
      # ssl:
      #   enabled: false
      #   keyStore: /opt/spinnaker/gate-tls/keystore.jks
      #   keyStorePassword: password
      #   keyAlias: server

    # Circular references since we're already using 'services'
    # services:
    #   clouddriver:
    #     baseUrl: ${services.clouddriver.baseUrl:localhost:7002}
    #   orca:
    #     baseUrl: ${services.orca.baseUrl:localhost:8083}
    #   front50:
    #     baseUrl: ${services.front50.baseUrl:localhost:8080}
    # #optional services:
    #   echo:
    #     enabled: ${services.echo.enabled:true}
    #     baseUrl: ${services.echo.baseUrl:8089}
    #   flapjack:
    #     enabled: ${services.flapjack.enabled:false}
    #   igor:
    #     enabled: ${services.igor.enabled:false}
    #     baseUrl: ${services.igor.baseUrl:8088}

    cors:
      allowedOriginsPattern: {{ .Values.gate.allowedOriginsPattern }}

    redis:
      connection: ${services.redis.connection}
  igor.yml: |
{{.Files.Get "config/igor.yml" | indent 4}}
  igor-local.yml: |
{{.Files.Get "config/igor-local.yml" | indent 4}}
  orca.yml: |
{{.Files.Get "config/orca.yml" | indent 4}}
  orca-local.yml: |
{{.Files.Get "config/orca-local.yml" | indent 4}}
  rosco.yml: |
{{.Files.Get "config/rosco.yml" | indent 4}}
  rosco-local.yml: |
{{.Files.Get "config/rosco-local.yml" | indent 4}}
  settings.js: |
    'use strict';

    var feedbackUrl = 'http://localhost';
    var gateHost = '{{ .Values.deck.protocol }}://{{ .Values.deck.host }}:{{ .Values.deck.port }}/gate';
    var bakeryDetailUrl = gateHost + '/bakery/logs/global/{{"{{"}}context.status.id{{"}}"}}';

    window.spinnakerSettings = {
      defaultProviders: ['kubernetes'],
      feedbackUrl: feedbackUrl,
      gateUrl: gateHost,
      bakeryDetailUrl: bakeryDetailUrl,
      pollSchedule: 30000,
      defaultTimeZone: 'America/Los_Angeles', // see http://momentjs.com/timezone/docs/#/data-utilities/
      providers: {
        kubernetes: {
          defaults: {
            account: 'local',
            namespace: 'default'
          },
        }
      },
      notifications: {
        email: {
          enabled: true,
        },
        hipchat: {
          enabled: false,
          botName: 'Skynet T-800'
        },
        sms: {
          enabled: false,
        },
        slack: {
          enabled: false,
          botName: 'spinnakerbot'
        }
      },
      whatsNew: {
        gistId: '32526cd608db3d811b38',
        fileName: 'news.md',
      },
      feature: {
        pipelines: true,
        jobs: true,
        notifications: true,
        fastProperty: false,
        vpcMigrator: false,
        clusterDiff: false,
        roscoMode: false,
        netflixMode: false,
        infrastructureStages: true, // Should 'createLoadBalancer' be a pipeline stage? (no).
      },
    };
  spinnaker.yml: |
{{.Files.Get "config/spinnaker.yml" | indent 4}}
  clouddriver-local.yml: |
    server:
      port: ${services.clouddriver.port:7002}
      address: 0.0.0.0

    default:
      account:
        env: ${providers.kubernetes.primaryCredentials.name}

    kubernetes:
      enabled: true
      accounts:
        - name: local
          dockerRegistries:
            {{- range $index, $account := .Values.accounts }}
            - accountName: {{ $account.name }}
            {{- end }}

    dockerRegistry:
      enabled: true
      accounts:
      {{- range $index, $account := .Values.accounts }}
        - name: {{ $account.name }}
          address: {{ $account.address }}
          {{- if $account.username }}
          username: {{ $account.username }}
          email: {{ $account.email }}
          {{- end }}
          {{- if $account.password }}
          passwordFile: /tmp/registry/password-{{ $account.name }}
          {{- end }}
          {{ if $account.repositories }}
          repositories:
            {{- range $index, $repo := $account.repositories }}
            - {{ $repo }}
            {{- end }}
          {{ end }}
      {{- end }}
    credentials:
      primaryAccountTypes: ${providers.kubernetes.primaryCredentials.name}
      challengeDestructiveActionsEnvironments: ${providers.kubernetes.primaryCredentials.name}
  spinnaker-local.yml: |
    global:
      spinnaker:
        environment: test

    services:
      default:
        # These defaults can be modified to change all the spinnaker subsystems
        # (clouddriver, gate, etc) at once, but not external systems (jenkins, etc).
        # Individual systems can still be overridden using their own section entry
        # directly under 'services'.
        host: localhost
        protocol: http

      clouddriver:
        host: {{ template "fullname" . }}-clouddriver
        port: 7002
        baseUrl: ${services.default.protocol}://${services.clouddriver.host}:${services.clouddriver.port}
        # Controls whether UserDataProviders are used to populate user data of new server groups.
        # If false, user data is copied over from ancestor server groups on both CopyLastAsgAtomicOperation and
        # ModifyAsgLaunchConfigurationOperation (only if no user data is provided on the given request).
        aws:
          udf:
            enabled: false

      echo:
        enabled: true
        host: {{ template "fullname" . }}-echo
        port: 8089
        baseUrl: ${services.default.protocol}://${services.echo.host}:${services.echo.port}
        cron:
          enabled: true
        notifications:
          # allow pipeline triggers to run periodically via cron expressions
          # If you wish for spinnaker to send notifications, configure the following blocks
          mail:
            enabled: {{ .Values.mail.enabled }}
            host: {{ .Values.mail.host }}
            username: {{ .Values.mail.username }}
            password: {{ .Values.mail.password }}
            fromAddress: {{ .Values.mail.fromAddress }}
            port: {{ .Values.mail.port }}
          hipchat:
            enabled: false
            url: # the hipchat server to connect to
            token: #the hipchat auth token
          sms:
            enabled: false
            account: # twilio account id
            token: # twilio auth token
            from: # phone number by which sms messages are sent
          slack:
            enabled: false
            token: # the part after http://hooks.slack.com/services/

      deck:
        host: {{ template "fullname" . }}-deck
        port: 9000
        baseUrl: ${services.default.protocol}://${services.deck.host}:${services.deck.port}
        gateUrl: ${services.gate.baseUrl}
        bakeryUrl: ${services.bakery.baseUrl}
        timezone: 'America/New_York'
        auth:
          enabled: false

      front50:
        host: {{ template "fullname" . }}-front50
        port: 8080
        baseUrl: ${services.default.protocol}://${services.front50.host}:${services.front50.port}

        # If using storage bucket persistence (gcs or s3), specify the bucket here
        # disable cassandra and enable the storage service below.
        storage_bucket: {{ .Values.storageBucket }}
        bucket_root: front50

        cassandra:
          enabled: false
        redis:
          enabled: false
        {{ if .Values.gcs.enabled }}
        gcs:
          enabled: true
          project: {{ .Values.gcs.project }}
        s3:
          enabled: false
        {{ else }}
        gcs:
          enabled: false
        s3:
          enabled: true
          endpoint: http://{{ .Release.Name }}-minio-svc:9000
        {{ end }}
      gate:
        host: {{ template "fullname" . }}-gate
        port: 8084
        baseUrl: ${services.default.protocol}://${services.gate.host}:${services.gate.port}/gate

      igor:
        # If you are integrating Jenkins then you must also enable Spinnaker's
        # "igor" subsystem.
        enabled: true
        host: {{ template "fullname" . }}-igor
        port: 8088
        baseUrl: ${services.default.protocol}://${services.igor.host}:${services.igor.port}

      kato:
        host: ${services.clouddriver.host}
        port: ${services.clouddriver.port}
        baseUrl: ${services.clouddriver.baseUrl}

      mort:
        host: ${services.clouddriver.host}
        port: ${services.clouddriver.port}
        baseUrl: ${services.clouddriver.baseUrl}

      orca:
        host: {{ template "fullname" . }}-orca
        port: 8083
        baseUrl: ${services.default.protocol}://${services.orca.host}:${services.orca.port}
        enabled: true

      oort:
        host: ${services.clouddriver.host}
        port: ${services.clouddriver.port}
        baseUrl: ${services.clouddriver.baseUrl}

      rosco:
        host: {{ template "fullname" . }}-rosco
        port: 8087
        baseUrl: ${services.default.protocol}://${services.rosco.host}:${services.rosco.port}
        # You need to provide the fully-qualified path to the directory containing the packer templates.
        # They typically live in rosco's config/packer directory.
        configDir: /opt/rosco/config/packer

      bakery:
        host: ${services.rosco.host}
        port: ${services.rosco.port}
        baseUrl: ${services.rosco.baseUrl}
        extractBuildDetails: true

      docker:
        # This target repository is used by the bakery to publish baked docker images.
        # Do not include http://.
        enabled: true
        targetRepository: viglesiasce/sample-app

      jenkins:
        # The "name" entry is used for the display name when selecting
        # this server. You must set `enabled` to true when enabling igor.
        #
        # If you have multiple jenkins servers, you will need to list
        # them in an igor-local.yml. See jenkins.masters in config/igor.yml.
        #
        # Note that jenkins is not installed with Spinnaker so you must obtain this
        # on your own if you are interested.
        enabled: true
        defaultMaster:
          name: default
          baseUrl: http://localhost:8080/
          username: admin
          password: admin

      redis:
        host: {{ .Release.Name }}-redis
        port: 6379
        connection: redis://:{{ .Values.redis.redisPassword }}@${services.redis.host}:${services.redis.port}

    providers:
    {{ with $account := first .Values.accounts }}
      kubernetes:
        enabled: true
        primaryCredentials:
          name: local
          namespace: default
          dockerRegistryAccount: {{ $account.name }}

      dockerRegistry:
        enabled: true
        primaryCredentials:
          name: {{ $account.name }}
          address: {{ $account.address }}
          repository: vic-goog/gceme
          {{- if $account.username }}
          username: {{ $account.username }}
          email: {{ $account.email }}
          {{- end }}
          {{- if $account.password }}
          passwordFile: /tmp/registry/password-{{ $account.name }}
          {{- end }}
    {{ end }}
