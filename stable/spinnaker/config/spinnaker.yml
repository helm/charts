
# This file is intended to serve as a master configuration for a Spinnaker
# deployment. Customizations to the deployment should be made in another file
# named "spinnaker-local.yml". The distribution has a prototype called
# "default-spinnaker-local.yml" which calls out the subset of attributes of
# general interest. It can be copied into a "spinnaker-local.yml" to start
# with. The prototype does not change any of the default values here, it just
# surfaces the more critical attributes.

global:
  spinnaker:
    environment: test
    timezone: 'America/Los_Angeles'

services:
  default:
    # These defaults can be modified to change all the spinnaker subsystems
    # (clouddriver, gate, etc) at once, but not external systems (jenkins, etc).
    # Individual systems can still be overridden using their own section entry
    # directly under 'services'.
    host: localhost
    protocol: http

  clouddriver:
    host: ${services.default.host}
    port: 7002
    baseUrl: ${services.default.protocol}://${services.clouddriver.host}:${services.clouddriver.port}
    aws:
      udf:
        # Controls whether UserDataProviders are used to populate user data of
        # new server groups. If false, user data is copied over from ancestor
        # server groups on both CopyLastAsgAtomicOperation and
        # ModifyAsgLaunchConfigurationOperation (only if no user data is
        # provided on the given request).
        enabled: true

  echo:
    enabled: true
    host: ${services.default.host}
    port: 8089
    baseUrl: ${services.default.protocol}://${services.echo.host}:${services.echo.port}

    cron:
      # Allow pipeline triggers to run periodically via cron expressions.
      enabled: true
      timezone: ${global.spinnaker.timezone}

    notifications:
      # The following blocks can enable Spinnaker to send notifications
      # using the corresponding mechanism.
      # See https://www.spinnaker.io/setup/features/notifications/
      # for more information.
      mail:
        enabled: ${services.echo.notifications.mail.enabled:false}
        host: ${services.echo.notifications.mail.host}
        from: ${services.echo.notifications.mail.fromAddress}
        username: ${services.echo.notifications.mail.username}
        password: ${services.echo.notifications.mail.password}
        port: ${services.echo.notifications.mail.port}
      hipchat:
        enabled: false
        url: # the hipchat server to connect to
        token: # the hipchat auth token
        botName: # the username of the bot
      sms:
        enabled: false
        account: # twilio account id
        token: # twilio auth token
        from: # phone number by which sms messages are sent
      slack:
        enabled: ${services.echo.notifications.slack.enabled:false}
        token: ${services.echo.notifications.slack.token}

  deck:
    host: ${services.default.host}
    port: 9000
    baseUrl: ${services.default.protocol}://${services.deck.host}:${services.deck.port}
    gateUrl: ${services.gate.baseUrl}
    bakeryUrl: ${services.bakery.baseUrl}
    timezone: ${global.spinnaker.timezone}
    auth:
      enabled: false

  fiat:
    enabled: false
    host: ${services.default.host}
    port: 7003
    baseUrl: ${services.default.protocol}://${services.fiat.host}:${services.fiat.port}

  front50:
    host: ${services.default.host}
    port: 8080
    baseUrl: ${services.default.protocol}://${services.front50.host}:${services.front50.port}

    # If using storage bucket persistence (gcs or s3), specify the bucket here
    # disable cassandra and enable the storage service below.
    storage_bucket: ${services.front50.storage_bucket}
    # (GCS Only) Location for bucket.
    bucket_location:
    bucket_root: front50

    cassandra:
      enabled: false
    redis:
      enabled: false
    gcs:
      enabled: ${services.front50.gcs.enabled} # Enable me
      project: ${services.front50.gcs.project}
    s3:
      enabled: ${services.front50.s3.enabled} # Or me
      endpoint: ${services.front50.s3.endpoint}

  gate:
    host: ${services.default.host}
    port: 8084
    baseUrl: ${services.default.protocol}://${services.gate.host}:${services.gate.port}

  igor:
    # If you are integrating Jenkins then you must also enable Spinnaker's
    # "igor" subsystem.
    enabled: false
    host: ${services.default.host}
    port: 8088
    baseUrl: ${services.default.protocol}://${services.igor.host}:${services.igor.port}

  kato:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  mort:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  orca:
    host: ${services.default.host}
    port: 8083
    baseUrl: ${services.default.protocol}://${services.orca.host}:${services.orca.port}
    timezone: ${global.spinnaker.timezone}
    enabled: true

  oort:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  rosco:
    host: ${services.default.host}
    port: 8087
    baseUrl: ${services.default.protocol}://${services.rosco.host}:${services.rosco.port}
    # You need to provide the fully-qualified path to the directory containing the packer templates.
    # They typically live in rosco's config/packer directory.
    configDir: /opt/rosco/config/packer

  bakery:
    host: ${services.rosco.host}
    port: ${services.rosco.port}
    baseUrl: ${services.rosco.baseUrl}
    extractBuildDetails: true
    propagateCloudProviderType: true
    allowMissingPackageInstallation: false

  docker:
    # This target repository is used by the bakery to publish baked docker images.
    # Do not include http://.
    enabled: ${services.docker.enabled:false}
    targetRepository: ${services.docker.targetRepository}

  jenkins:
    # The "name" entry is used for the display name when selecting
    # this server. You must set `enabled` to true when enabling igor.
    #
    # If you have multiple jenkins servers, you will need to list
    # them in an igor-local.yml. See jenkins.masters in config/igor.yml.
    #
    # Note that jenkins is not installed with Spinnaker so you must obtain this
    # on your own if you are interested.
    enabled: ${services.igor.enabled:false}
    defaultMaster:
      name: Jenkins
      baseUrl:   # Expected in spinnaker-local.yml
      username:  # Expected in spinnaker-local.yml
      password:  # Expected in spinnaker-local.yml

  redis:
    host: ${services.default.host}
    port: 6379
    connection: redis://${services.redis.host}:${services.redis.port}

  cassandra:
    # cassandra.enabled is no longer used
    # cassandra is enabled or disabled on a per-service basis
    # where the alternative persistence mechanism for that service
    # can be enabled.
    host: ${services.cassandra.host}
    port: ${services.cassandra.port}
    embedded: ${services.cassandra.embedded}
    cluster: ${services.cassandra.cluster}

providers:
  aws:
    # For more information on configuring Amazon Web Services (aws), see
    # https://www.spinnaker.io/setup/providers/aws/

    enabled: false
    simpleDBEnabled: false
    defaultRegion: us-east-1
    defaultSimpleDBDomain: CLOUD_APPLICATIONS
    primaryCredentials:
      name: default
      # The actual credentials are set using a standard AWS client library mechanism
      # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html
      # Typically this is a $HOME/.aws/credentials file (remember, a standard
      # spinnaker installation runs as user "spinnaker" whose $HOME is
      # /home/spinnaker). The primaryCredentials.name will identify which profile
      # to use (for .aws/credentials).

    # {{name}} will be interpolated with the aws account name (e.g. "my-aws-account-keypair").
    defaultKeyPairTemplate: "{{name}}-keypair"

  google:
    # For more information on configuring Google Cloud Platform (google), see
    # https://www.spinnaker.io/setup/providers/gce/

    enabled: false
    defaultRegion: us-central1
    defaultZone: us-central1-f
    primaryCredentials:
      name: my-account-name
      # The project is the Google Project ID for the project to manage with
      # Spinnaker. The jsonPath is a path to the JSON service credentials
      # downloaded from the Google Developer's Console.
      project:
      jsonPath:

  azure:
    # For more information on configuring Microsoft Azure (azure), see
    # https://www.spinnaker.io/setup/providers/azure/

    enabled: false
    defaultRegion: westus
    primaryCredentials:
      name: my-azure-account

      # To set Azure credentials, enter your Azure subscription values for:
      # clientId, appKey, tenantId, and subscriptionId.
      clientId:
      appKey:
      tenantId:
      subscriptionId:

  kubernetes:
    # For more information on configuring Kubernetes clusters (kubernetes), see
    # https://www.spinnaker.io/setup/providers/kubernetes/

    # NOTE: enabling kubernetes also requires enabling dockerRegistry.
    enabled: ${providers.kubernetes.enabled}
    primaryCredentials:
      name: ${providers.kubernetes.primaryCredentials.name}
      namespace: ${providers.kubernetes.primaryCredentials.namespace}
      dockerRegistryAccount: ${providers.dockerRegistry.primaryCredentials.name}

  dockerRegistry:
    # If you want to use a container based provider, you need to configure and
    # enable this provider to cache images.
    enabled: ${providers.dockerRegistry.enabled}
    primaryCredentials:
      name: ${providers.dockerRegistry.primaryCredentials.name}
      address: ${providers.dockerRegistry.primaryCredentials.address}
      repository: ${providers.dockerRegistry.primaryCredentials.repository}
