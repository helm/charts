# Default values for home-assistant.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: homeassistant/home-assistant
  tag: 0.74.2
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8123
  annotations: {}
  labels: {}
  clusterIP: ""
  ## List of IP addresses at which the hass-configurator service is available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  # nodePort: 30000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - home-assistant.local
  tls: []
  #  - secretName: home-assistant-tls
  #    hosts:
  #      - home-assistant.local

persistence:
  enabled: true
  ## home-assistant data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  accessMode: ReadWriteMany
  size: 5Gi

## Additional hass-configurator container environment variable
## For instance to add a http_proxy
##
extraEnv: {}

configurator:
  enabled: false

  ## hass-configurator container image
  ##
  image:
    repository: causticlab/hass-configurator-docker
    tag: x86_64-0.3.1
    pullPolicy: IfNotPresent

  ## URL for the home assistant API endpoint
  # hassApiUrl: http://home-assistant:8123/api/
  ## home assistant API password
  # hassApiPassword:
  ## path where the home assistant configuration is stored
  basepath: /config
  ## don't allow switching out of the base path
  enforceBasepath: true
  ## username for basic auth for accessing the configurator
  # username:
  ## password (sha256-hash) for basic auth for accessing the configurator
  ## For example "test" would be "{sha256}9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
  # password:

  ## Additional hass-configurator container environment variable
  ## For instance to add a http_proxy
  ##
  extraEnv: {}

  ingress:
    ## If true, hass-configurator Ingress will be created
    ##
    enabled: false

    ## hass-configurator Ingress annotations
    ##
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## hass-configurator Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts: []
    #   - hass-configurator.domain.com
    #   - domain.com/hass-configurator

    ## hass-configurator Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: hass-configurator-tls
    #     hosts:
    #       - hass-configurator.domain.com

  ## hass-configurator Deployment Strategy type
  # strategy:
  #   type: Recreate

  ## Node tolerations for hass-configurator scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for hass-configurator pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Annotations to be added to hass-configurator pods
  ##
  podAnnotations: {}

  replicaCount: 1

  ## hass-configurator resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to hass-configurator pods
  ##
  securityContext: {}

  service:
    type: ClusterIP
    port: 3218
    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:
    ## Provide any additional annotations which may be required. This can be used to
    ## set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: {}
    labels: {}
    clusterIP: ""
    ## List of IP addresses at which the hass-configurator service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []
    ## Use loadBalancerIP to request a specific static IP,
    ## otherwise leave blank
    ##
    loadBalancerIP:
    loadBalancerSourceRanges: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
