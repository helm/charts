server:
  ## Pod annotations:
  ##
  # annotations:
  #   iam.amazonaws.com/role: grafana

  image:
    # Change this if you need to pull the image from a private mirror, rather than Docker Hub
    repository: grafana
    # The actual name of the image
    name: grafana
    tag: "5.0.4"
    pullPolicy: IfNotPresent
    # When pulling from a private docker registry, you can set this to use a pull secret
    # pullSecret: my-secret-name

  # Extra environmental configuration. Example:
  #  extraEnv:
  #    - name: MY_VAR
  #      value: "myval"
  extraEnv: []

  nodeSelector: {}
  tolerations: []

  # Multiple replicas do not work with the default sqlite database,
  # see http://docs.grafana.org/tutorials/ha_setup/.
  replicaCount: 1

  antiAffinity:
    enabled: false
    type: hard

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: false

    ## Ingress annotations
    ##
    # annotations:
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## Ingress hostnames
    ## Must be provided if Ingress is enabled
    ##
    # hosts:
    #   - grafana.domain.com

    ## Ingress path
    ## Optional, allows specifying paths for more flexibility
    ## E.g. Traefik ingress likes paths
    ##
    # path: /

    ## Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    # tls:
    #   - secretName: grafana-server-tls
    #     hosts:
    #       - grafana.domain.com

  ## Pod container name
  name: grafana

  adminUser: "admin"
  # adminPassword: "admin"

  # Persist data to a persitent volume
  persistentVolume:
    ## If true, Grafana will create a Persistent Volume Claim
    ## If false, use emptyDir
    enabled: true

    ## Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    accessModes:
      - ReadWriteOnce

    ## Persistent Volume annotations
    annotations: {}

    ## Persistent Volume existing claim name
    ## Requires server.persistentVolume.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

    ## Persistent Volume size
    size: 1Gi

    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## Subdirectory of data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    subPath: ""

  ## Resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    requests:
      cpu: 100m
      memory: 100Mi

  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 30
    timeoutSeconds: 30

  ## Service layer options
  service:
    annotations: {}

    type: ClusterIP

    httpPort: 80

    # The name of the httpPort
    httpPortName: "http"

    ## specify a custom cluster IP for the Service
    ## clusterIP: None

    ## Load balancer IP address
    ## Is not required, but allows for static address with
    ## serviceType LoadBalancer.
    ## If not supported by cloud provider, this field is ignored.
    ## Default: nil
    ##
    # loadBalancerIP: 130.211.x.x

    ## This will restrict traffic through the cloud-provider load-balancer
    ## to the specified client IPs.
    ## If not supported by cloud provider, this field is ignored.
    ## Default: nil
    ##
    # loadBalancerSourceRanges:
    #   - 0.0.0.0/0

    ## nodePort port number
    ## Is not required, but allows for static port assignment with
    ## serviceType NodePort.
    ## Default: nil
    # nodePort: 30000

    ## External IP addresses of service
    ## Default: nil
    ##
    # externalIPs:
    # - 192.168.0.1

  ## Pod termination grace period (in seconds)
  terminationGracePeriodSeconds: 300

  ## Pass the plugins you want installed as a comma separated list.
  ## This will pass each plugin name to `grafana-cli plugins install ${plugin}`.
  ## Ref: https://github.com/grafana/grafana-docker#installing-plugins-for-grafana-3
  ##
  # installPlugins:

  # http://docs.grafana.org/administration/provisioning/#datasources
  datasourceConfig:
    apiVersion: 1

    # list of datasources that should be deleted from the database
    deleteDatasources: []

    # list of datasources to insert/update depending on whats available in the database
    datasources: []

  # Dashboards that will automatically be installed into grafana (and its database)
  dashboardFiles: {}

  # Configuration for provisioning dashboards
  # http://docs.grafana.org/administration/provisioning/#dashboards
  dashboardProvisioningConfig:
    apiVersion: 1

    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: false
        options:
          path: /var/lib/grafana/dashboards

  #
  # Directories. Probably best to leave these be
  #
  ## Location for main config directory
  configLocalPath: /etc/grafana

  ## Local path where provisioned dashboards are placed
  dashboardLocalPath: /var/lib/grafana/dashboards

  # Where the actual "provisioning" configuration is for dashboards
  dashboardProvisioningLocalPath: /var/lib/grafana/provisioning/dashboards

  # Where provisioned datasource files are placed
  datasourcesLocalPath: /var/lib/grafana/provisioning/datasources

  ## Local data storage path
  storageLocalPath: /var/lib/grafana/data

## Grafana config file ConfigMap entry
##
serverConfigFile:
  grafana.ini: |
    ; instance_name = ${HOSTNAME}
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /var/lib/grafana/provisioning

    [server]
    ;protocol = http
    ;http_addr =
    ;http_port = 3000
    ;domain = localhost
    ;enforce_domain = false
    ;root_url = %(protocol)s://%(domain)s:%(http_port)s/
    ;router_logging = false
    ;static_root_path = public
    ;enable_gzip = false
    ;cert_file =
    ;cert_key =

    [database]
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    ;password =
    ;ssl_mode = disable
    ;path = grafana.db

    [session]
    ;provider = file
    ;provider_config = sessions
    ;cookie_name = grafana_sess
    ;cookie_secure = false
    ;session_life_time = 86400

    [analytics]
    ;reporting_enabled = true
    check_for_updates = true
    ;google_analytics_ua_id =

    [security]
    ;admin_user = admin
    ;admin_password = admin
    ;secret_key = SW2YcwTIb9zpOOhoPsMm
    ;login_remember_days = 7
    ;cookie_username = grafana_user
    ;cookie_remember_name = grafana_remember
    ;disable_gravatar = false
    ;data_source_proxy_whitelist =

    [snapshots]
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io

    [users]
    ;allow_sign_up = true
    ;allow_org_create = true
    ;auto_assign_org = true
    ;auto_assign_org_role = Viewer
    ;login_hint = email or username
    ;default_theme = dark

    [auth.anonymous]
    ;enabled = false
    ;org_name = Main Org.
    ;org_role = Viewer

    [auth.github]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =

    [auth.google]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =

    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true

    [auth.basic]
    ;enabled = true

    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml

    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost

    [emails]
    ;welcome_email_on_sign_up = false

    [log]
    mode = console
    level = info

    [log.console]
    ;level =
    ;format = console

    [event_publisher]
    ;enabled = false
    ;rabbitmq_url = amqp://localhost/
    ;exchange = grafana_events

    [metrics]
    ;enabled           = true
    ;interval_seconds  = 10

    ; [metrics.graphite]
    ; address = localhost:2003
    ; prefix = prod.grafana.%(instance_name)s.

    [grafana_net]
    url = https://grafana.net
