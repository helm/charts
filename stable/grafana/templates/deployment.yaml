apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "grafana.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Values.server.name }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "grafana.server.fullname" . }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- range $key, $value := .Values.server.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        app: {{ template "grafana.fullname" . }}
        component: "{{ .Values.server.name }}"
        release: "{{ .Release.Name }}"
    spec:
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
  {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
  {{- end }}
      {{- if .Values.server.antiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          {{- $antiAffinityType := .Values.server.antiAffinity.type | lower }}
          {{- if eq $antiAffinityType "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app: {{ template "grafana.server.fullname" . }}
          {{- end }}
          {{- if eq $antiAffinityType "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ template "grafana.server.fullname" . }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ template "grafana.name" . }}
          image: "{{ .Values.server.image.repository }}/{{ .Values.server.image.name }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          {{- if .Values.server.image.pullSecret }}
          imagePullSecrets:
            - name: {{ .Values.server.image.pullSecret }}
          {{- end }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}
                  key: grafana-admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.server.fullname" . }}
                  key: grafana-admin-password
            {{- if .Values.server.installPlugins }}
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "grafana.server.fullname" . }}-config
                  key: grafana-install-plugins
            {{- end }}
            {{- if .Values.server.extraEnv }}
{{ toYaml .Values.server.extraEnv | indent 12 }}
            {{- end }}
          ports:
            - containerPort: 3000
          readinessProbe:
{{ toYaml .Values.server.readinessProbe | indent 12 }}
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: {{ .Values.server.configLocalPath | quote }}
            - name: dashboard-volume
              mountPath: {{ .Values.server.dashboardLocalPath | quote }}
            - name: dashboard-provisioning-volume
              mountPath: {{ .Values.server.dashboardProvisioningLocalPath | quote }}
            - name: datasources-volume
              mountPath: {{ .Values.server.datasourcesLocalPath | quote }}
            - name: storage-volume
              mountPath: {{ .Values.server.storageLocalPath | quote }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
      terminationGracePeriodSeconds: {{ .Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: datasources-volume
          secret:
            secretName: {{ template "grafana.server.fullname" . }}-datasources
        - name: config-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-config
        - name: dashboard-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dashs
        - name: dashboard-provisioning-volume
          configMap:
            name: {{ template "grafana.server.fullname" . }}-dash-provisioning
        - name: storage-volume
      {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "grafana.server.fullname" . }}{{- end }}
      {{- else }}
          emptyDir: {}
      {{- end -}}
