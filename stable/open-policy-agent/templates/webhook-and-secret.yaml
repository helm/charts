{{/* 

Go Template scoping is a little strict. So we generate the ca, 
and cert here. Then pass them to a couple of helper fns. Those
functions check against values passed in by the user, returning
the user provided values in preference to the locally generated 
ones.  This allows a user of the chart to provide their own CA, 
cert and key if they so wish.
*/}}
{{- $ca := genCA "admission_ca" ( int .Values.tls.caDays ) }}
{{- $cn := printf "%s.%s.svc" (include "open-policy-agent.fullname" . ) .Release.Namespace }}
{{- $cert := genSignedCert $cn nil nil ( int .Values.tls.certDays ) $ca }}
---
apiVersion: v1
type: kubernetes.io/tls
kind: Secret
type: Opaque
metadata:
  name: {{ include "open-policy-agent.fullname" . }}
  labels: {{ include "open-policy-agent.labels" . | indent 4 }}
data:
  {{ if .Values.tls.autoGenerate }}
  tls.crt: {{ b64enc $cert.Key }}
  tls.key: {{ b64enc $cert.Key }}
  {{ else }}
  tls.crt: {{ b64enc .Values.tls.cert }}
  tls.key: {{ b64enc .Values.tls.key }}
  {{ end }}

{{- if .Values.opa.deployWebhook }}
---
kind: ValidatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1beta1
metadata:
  name: opa-validating-webhook
  labels: {{ include "open-policy-agent.labels" . | indent 4 }}
  annotations:
    # Ensure we only run this on install. Otherwise the certs get re-created
    # but the pod doesn't get bounced, so the webhook fails.
    helm.sh/hook: post-install
webhooks:
  - name: validating-webhook.openpolicyagent.org
    rules:
      - operations: ["CREATE", "UPDATE", "DELETE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["*"]
    clientConfig:
    {{- if .Values.tls.autoGenerate }}
      caBundle: {{ b64enc $ca.Cert }}
    {{ else }}
      caBundle: {{ b64enc .Values.tls.ca }}
    {{- end -}}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "open-policy-agent.fullname" . }}
{{- end -}}