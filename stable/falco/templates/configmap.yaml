apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "falco.fullname" . }}
  labels:
    app: {{ template "falco.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  falco.yaml: |-
    # File(s) or Directories containing Falco rules, loaded at startup.
    # The name "rules_file" is only for backwards compatibility.
    # If the entry is a file, it will be read directly. If the entry is a directory,
    # every file in that directory will be read, in alphabetical order.
    #
    # falco_rules.yaml ships with the falco package and is overridden with
    # every new software version. falco_rules.local.yaml is only created
    # if it doesn't exist. If you want to customize the set of rules, add
    # your customizations to falco_rules.local.yaml.
    #
    # The files will be read in the order presented here, so make sure if
    # you have overrides they appear in later files.
    rules_file:
      {{- range .Values.falco.rulesFile }}
      - {{ . }}
      {{- end }}

    # If true, the times displayed in log messages and output messages
    # will be in ISO 8601. By default, times are displayed in the local
    # time zone, as governed by /etc/localtime.
    time_format_iso_8601: {{ .Values.falco.timeFormatISO8601 }}

    # Whether to output events in json or text
    {{- if (or .Values.integrations.gcscc.enabled .Values.integrations.natsOutput.enabled .Values.integrations.snsOutput.enabled .Values.integrations.pubsubOutput.enabled) }}
    json_output: true
    {{- else }}
    json_output: {{ .Values.falco.jsonOutput }}
    {{- end }}

    # When using json output, whether or not to include the "output" property
    # itself (e.g. "File below a known binary directory opened for writing
    # (user=root ....") in the json output.

    {{- if (or .Values.integrations.natsOutput.enabled .Values.integrations.snsOutput.enabled .Values.integrations.pubsubOutput.enabled) }}
    json_include_output_property: true
    {{- else }}
    json_include_output_property: {{ .Values.falco.jsonIncludeOutputProperty }}
    {{- end }}

    # Send information logs to stderr and/or syslog Note these are *not* security
    # notification logs! These are just Falco lifecycle (and possibly error) logs.
    log_stderr: {{ .Values.falco.logStderr }}
    log_syslog: {{ .Values.falco.logSyslog }}

    # Minimum log level to include in logs. Note: these levels are
    # separate from the priority field of rules. This refers only to the
    # log level of falco's internal logging. Can be one of "emergency",
    # "alert", "critical", "error", "warning", "notice", "info", "debug".
    log_level: {{ .Values.falco.logLevel }}

    # Minimum rule priority level to load and run. All rules having a
    # priority more severe than this level will be loaded/run.  Can be one
    # of "emergency", "alert", "critical", "error", "warning", "notice",
    # "info", "debug".
    priority: {{ .Values.falco.priority }}

    # Whether or not output to any of the output channels below is
    # buffered. Defaults to false
    buffered_outputs: {{ .Values.falco.bufferedOutputs }}

    # Falco uses a shared buffer between the kernel and userspace to pass
    # system call information. When falco detects that this buffer is
    # full and system calls have been dropped, it can take one or more of
    # the following actions:
    #   - "ignore": do nothing. If an empty list is provided, ignore is assumed.
    #   - "log": log a CRITICAL message noting that the buffer was full.
    #   - "alert": emit a falco alert noting that the buffer was full.
    #   - "exit": exit falco with a non-zero rc.
    #
    # The rate at which log/alert messages are emitted is governed by a
    # token bucket. The rate corresponds to one message every 30 seconds
    # with a burst of 10 messages.
    syscall_event_drops:
      actions:
        {{- range .Values.falco.syscallEventDrops.actions }}
        - {{ . }}
        {{- end }}
      rate: {{ .Values.falco.syscallEventDrops.rate  }}
      max_burst: {{ .Values.falco.syscallEventDrops.maxBurst }}

    # A throttling mechanism implemented as a token bucket limits the
    # rate of falco notifications. This throttling is controlled by the following configuration
    # options:
    #  - rate: the number of tokens (i.e. right to send a notification)
    #    gained per second. Defaults to 1.
    #  - max_burst: the maximum number of tokens outstanding. Defaults to 1000.
    #
    # With these defaults, falco could send up to 1000 notifications after
    # an initial quiet period, and then up to 1 notification per second
    # afterward. It would gain the full burst back after 1000 seconds of
    # no activity.
    outputs:
      rate: {{ .Values.falco.outputs.rate }}
      max_burst: {{ .Values.falco.outputs.maxBurst }}

    # Where security notifications should go.
    # Multiple outputs can be enabled.

    syslog_output:
      enabled: {{ .Values.falco.syslogOutput.enabled }}

    # If keep_alive is set to true, the file will be opened once and
    # continuously written to, with each output message on its own
    # line. If keep_alive is set to false, the file will be re-opened
    # for each output message.
    #
    # Also, the file will be closed and reopened if falco is signaled with
    # SIGUSR1.

    {{- if (or .Values.integrations.natsOutput.enabled .Values.integrations.snsOutput.enabled .Values.integrations.pubsubOutput.enabled) }}
    file_output:
      enabled: true
      keep_alive: true
      filename: /var/run/falco/nats
    {{- else }}
    file_output:
      enabled: {{ .Values.falco.fileOutput.enabled }}
      keep_alive: {{ .Values.falco.fileOutput.keepAlive }}
      filename: {{ .Values.falco.fileOutput.filename }}
    {{- end }}

    stdout_output:
      enabled: {{ .Values.falco.stdoutOutput.enabled }}

    # Falco contains an embedded webserver that can be used to accept K8s
    # Audit Events. These config options control the behavior of that
    # webserver. (By default, the webserver is disabled).
    #
    # The ssl_certificate is a combination SSL Certificate and corresponding
    # key contained in a single file. You can generate a key/cert as follows:
    #
    # $ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem
    # $ cat certificate.pem key.pem > falco.pem
    # $ sudo cp falco.pem /etc/falco/falco.pem

    webserver:
      enabled: {{ .Values.falco.webserver.enabled }}
      listen_port: {{ .Values.falco.webserver.listenPort }}
      k8s_audit_endpoint: {{ .Values.falco.webserver.k8sAuditEndpoint }}
      ssl_enabled: false
      ssl_certificate: /etc/falco/falco.pem

    # Possible additional things you might want to do with program output:
    #   - send to a slack webhook:
    #         program: "\"jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX\""
    #   - logging (alternate method than syslog):
    #         program: logger -t falco-test
    #   - send over a network connection:
    #         program: nc host.example.com 80

    # If keep_alive is set to true, the program will be started once and
    # continuously written to, with each output message on its own
    # line. If keep_alive is set to false, the program will be re-spawned
    # for each output message.
    #
    # Also, the program will be closed and reopened if falco is signaled with
    # SIGUSR1.
    {{- if .Values.integrations.gcscc.enabled }}
    program_output:
      enabled: true
      keep_alive: false
      program: "curl -d @- -X POST --header 'Content-Type: application/json' --header 'Authorization: {{ .Values.integrations.gcscc.webhookAuthenticationToken }}' {{ .Values.integrations.gcscc.webhookUrl }}"
    {{- else }}
    program_output:
      enabled: {{ .Values.falco.programOutput.enabled }}
      keep_alive: {{ .Values.falco.programOutput.keepAlive }}
      program: |
{{ .Values.falco.programOutput.program | indent 8 }}
    {{- end }}

    http_output:
      enabled: {{ .Values.falco.httpOutput.enabled }}
      url: {{ .Values.falco.httpOutput.url }}

    grpc:
      enabled: {{ .Values.falco.grpc.enabled }}
      bind_address: "0.0.0.0:{{ .Values.falco.grpc.listenPort }}"
      threadiness: {{ .Values.falco.grpc.threadiness }}
      private_key: {{ .Values.falco.grpc.privateKey }}
      cert_chain: {{ .Values.falco.grpc.certChain }}
      root_certs: {{ .Values.falco.grpc.rootCerts }}

    grpc_output:
      enabled: {{ .Values.falco.grpcOutput.enabled }}

  {{- if .Values.integrations.snsOutput.enabled }}
  aws_default_region: {{ .Values.integrations.snsOutput.aws_default_region }}
  {{- end }}

{{ (.Files.Glob "rules/*").AsConfig | indent 2 }}
