# ========================================================
# Definition of autodiscovery patterns
# ========================================================

# The top level element identifies the app type.
# The value of this element is used by AA to correctly
# setup the corresponding agent. Then we have a number
# of attributes that determines whether certain app is
# discovered as such. Firstly, the `process` accepts a
# regular expression pattern to identify process's image
# name that originated the event and is susceptible for
# classification.
# Then, we have `args` that represents the regular expression
# used to match the tokens from process's command line. The
# sequence of well-known ports is also used as an advice to
# autodisco machinery that specific service could expose these
# ports. The Infra agent also sends requests to these ports
# in order to get additional meta info.


# Finally, `labels` attribute provides custom key-value pairs
# that are attached as container labels/env vars. The naming
# of some of them might be specific to AA framework and thus
# are used by itself.

# You can use any valid go template (https://golang.org/pkg/text/template/)
# construct inside yaml file. You can access command line args
# or discovered ports like this:
#
# labels:
#   cmdline: "{{ .Args}}"
#
# For instance to get the container id or container name you
# would use the following go template action. Please note that built-in `isset`
# function is used to ensure container details are present since some
# apps can be discovered in the VM or baremetal host and thus lack container
# meta.
#
# labels:
#    container.name: '{{if isset .ContainerInfo "Name"}}{{ .ContainerInfo.Name }}{{end}}'
#    container.id:  '{{if isset .ContainerInfo "ID"}}{{ .ContainerInfo.ID }}{{end}}'

# You can also query app meta info through `Meta` field. For example, to get
# the version of nginx server use '{{if isset .Meta "Version"}}{{ .Meta.Version }}{{end}}'
# in `labels` section.

cassandra:
  process: java
  args: org.apache.cassandra.service.CassandraDaemon
  ports:
    - 7199
    - 7000
    - 7001
    - 9160
    - 9042

clickhouse:
  process: clickhouse-.*
  args: clickhouse-server --config=.*
  ports:
    - 8123
    - 9000
    - 9009
  labels:
    SPM_MONITOR_CLICKHOUSE_DB_HOST_PORT: "{{ .IP }}:8123"
    SPM_MONITOR_CLICKHOUSE_DB_USER:
    SPM_MONITOR_CLICKHOUSE_DB_PASSWORD:

couchbase:
  process: beam.smp
  args: couchbase
  ports:
    - 8092
    - 8093
    - 8094
    - 11210
  labels:
    COUCHBASE_HOSTPORT: "{{ .IP }}:8093"
    COUCHBASE_QUERY_HOSTPORT: "{{ .IP }}:8093"
    COUCHBASE_BASICAUTH_USERNAME:
    COUCHBASE_BASICAUTH_PASSWORD:

elasticsearch:
  process: java
  args: org.elasticsearch.bootstrap.Elasticsearch\b
  ports:
    - 9200
    - 9300
    - 9201
    - 9202
    - 9301
    - 9302
  labels:
    SPM_MONITOR_ES_NODE_HOSTPORT: "{{ .IP }}:9200"

flink:
  process: java
  args: org.apache.flink.runtime.entrypoint.StandaloneSessionClusterEntrypoint\b|org.apache.flink.runtime.taskexecutor.TaskManagerRunner\b
  ports:
    - 6123
    - 6121
    - 6122
  lables:
    FLINK_HOSTPORT: "{{ .IP }}:8081"

haproxy:
  process: haproxy
  args: .*haproxy.*haproxy.cfg.*-p

httpd:
  process: httpd
  args: httpd-*D*
  ports:
    - 80
    - 443
    - 8080
    - 8443

kafka:
  process: java
  args: kafka.Kafka .*server\.properties
  ports:
    - 9092

mongodb:
  process: mongod|listener|conn\d+
  args: mongod.*|listener|conn\d+
  ports:
    - 27017

mysql:
  process: mysqld
  args: mysqld.*
  ports:
    - 3306

nats:
  process: gnatsd
  args: "gnatsd -c gnatsd.conf"
  ports:
    - 4222
    - 8222
    - 6222
  labels:
    NATS_SERVER_HOSTPORT: "{{ .IP }}:8222"

nginx:
  process: nginx
  args: "nginx: master process.*|nginx: worker process.*|nginx -g daemon off.*"
  ports:
    - 80
    - 443
    - 8080
    - 8443
  labels:
    container.name: '{{if isset .ContainerInfo "Name"}}{{ .ContainerInfo.Name }}{{end}}'
    container.id: '{{if isset .ContainerInfo "ID"}}{{ .ContainerInfo.ID }}{{end}}'
    version: '{{if isset .Meta "Version"}}{{ .Meta.Version }}{{end}}'

postgresql:
  process: postgres
  args: postgres
  ports:
    - 5432
  labels:
    POSTGRESQL_DB_HOST_PORT: 5432
    POSTGRESQL_DB_DATABASE: pg_stat_user_tables
    POSTGRESQL_DB_USER:
    POSTGRESQL_DB_PASSWORD:

rabbitmq:
  process: beam.smp
  args: mnesia|rabbitmq
  ports:
    - 5672
    - 5671
    - 15672
  labels:
    RABBITMQ_API_URL: "http://{{ .IP }}:15672"
    RABBITMQ_BASICAUTH_USERNAME:
    RABBITMQ_BASICAUTH_PASSWORD:

redis:
  process: redis-server
  args: redis-server .*
  ports:
    - 6379

solr:
  process: java
  args: -Dsolr.solr.home|-Dsolr.data.home|-Dsolr.default.confdir
  ports:
    - 8983
    - 7983

spark-master:
  process: java
  args: org.apache.spark.deploy.master.Master
  ports:
    - 7707
    - 4040

spark-worker:
  process: java
  args: org.apache.spark.deploy.worker.Worker
  ports:
    - 7707
    - 4040

spark-driver:
  process: java
  args: org.apache.spark.deploy.SparkSubmit.*--deploy-mode client.*|org.apache.spark.deploy.worker.DriverWrapper
  ports:
    - 7707
    - 4040

spark-executor:
  process: java
  args: org.apache.spark.executor.CoarseGrainedExecutorBackend
  ports:
    - 7707
    - 4040

storm-nimbus:
  process: java
  args: org.apache.storm.daemon.nimbus
  ports:
    - 6627
    - 6700
    - 6701
    - 6702
    - 6703

storm-supervisor:
  process: java
  args: org.apache.storm.daemon.supervisor.Supervisor
  ports:
    - 6627
    - 6700
    - 6701
    - 6702
    - 6703

storm-worker:
  process: java
  args: org.apache.storm.daemon.worker
  ports:
    - 6627
    - 6700
    - 6701
    - 6702
    - 6703

jvm:
  process: java
  args: org.eclipse.jetty.xml.XmlConfiguration|-Djetty.base
  ports:
    - 80
    - 443
    - 8080
    - 8443

tomcat:
  process: java
  args: org.apache.catalina.startup.Bootstrap
  ports:
    - 80
    - 443
    - 8080
    - 8443

zookeeper:
  process: java
  args: org.apache.zookeeper.server.quorum.QuorumPeerMain\b
  ports:
    - 2181
    - 2888
    - 3888
