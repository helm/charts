image:
  repository: sorintlab/stolon
  tag: v0.10.0-pg9.6
  pullPolicy: IfNotPresent

debug: false

persistence:
  enabled: true
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 10Gi

rbac:
  create: true

serviceAccount:
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: my-name

superuserUsername: "stolon"
replicationUsername: "repluser"

## password for the replication user (default is 40 random chars)
# replicationPassword: "replPassword"

## password for the superuser (default is 40 random chars)
# superuserPassword: ""

## backend could be one of the following: consul, etcdv2, etcdv3, or kubernetes (experimental)
store:
  installConsul: true
  installEtcd: false
  backend: "consul"
  endpoints: "http://stolon-consul:8500"

## Update to customize backend store
consul:
  Replicas: 1
  ui:
    enabled: false
  uiService:
    enabled: false

ports:
  stolon:
    containerPort: 5432
    protocol: TCP

keeper:
  replicaCount: 2
  resources: {}
  service:
    type: ClusterIP
    annotations: {}
    ports:
      keeper:
        port: 5432
        targetPort: keeper
        protocol: TCP
  ## configure ssl for client access
  # create certificates according to these instructions: https://www.postgresql.org/docs/9.6/static/ssl-tcp.html
  # to enable encrypted traffic, servert.crt and server.key are required, by that name.
  # the use of ** Client Certificates ** is not supported
  clientSsl:
    enabled: false
    certs_secret_name: pg-cert-secret

proxy:
  replicaCount: 2
  resources: {}
  service:
    type: ClusterIP
    annotations: {}
    ports:
      proxy:
        port: 5432
        targetPort: proxy
        protocol: TCP
  affinity: {}
  nodeSelector: {}
  tolerations: []

sentinel:
  replicaCount: 2
  resources: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []

slowQueries:
  enabled: false
  minDuration: 300
