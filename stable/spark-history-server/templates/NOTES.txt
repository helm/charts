Get the application URL by running the following commands. Note that the UI would take a minute or two to show up after the pods and services are ready.
{{- if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "spark-history-server.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl -n {{ .Release.Namespace }} get svc -w {{ include "spark-history-server.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "spark-history-server.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
     NOTE: If on OpenShift, run the following command instead:
  export SERVICE_IP=$(oc get svc --namespace {{ .Release.Namespace }} {{ include "spark-history-server.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
    Note: If on OpenShift, change to the chart namespace before running the command below.'
  kubectl port-forward $POD_NAME 8080:80
    Now visit http://127.0.0.1:8080 to use your application.'
{{- end }}
