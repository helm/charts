hydra:
  replicas: 1

  image:
    repository: oryd/hydra
    tag: v1.0.0-beta.8-alpine
    pullPolicy: IfNotPresent

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    pullSecrets: []
    #  - myRegistrKeySecretName

  securityContext:
    runAsUser: 1000
    fsGroup: 1000
    runAsNonRoot: true

  ## Set to "1" to disable telemetry collection and sharing - for more information please
  ## visit https://ory.gitbooks.io/hydra/content/telemetry.html
  disableTelemetry: 0

  ## Disable HTTP/2 over TLS (HTTPS) and serve HTTP instead. Never use this in production.
  dangerousForceHttp: false

  secrets:
    ## Hydra system secret (at least 16 characters)
    ## If not set, a random 16 secret will be used.
    system: ""
    ## Secret that is used to encrypt cookie sessions.
    ## If not set, a random 16 secret will be used.
    cookie: ""

  ## Additional init containers, e. g. for providing custom themes
  initContainers: |

  ## Additional sidecar containers
  extraContainers: |

  ## Allows the specification of additional environment variables for hydra
  extraEnv: |
    # - name: LOG_LEVEL
    #   value: debug
    # - name: OAUTH2_SHARE_ERROR_DEBUG
    #   value: true

  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app:  {{ template "hydra.name" . }}
              release: "{{ .Release.Name }}"
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app:  {{ template "hydra.name" . }}
                release: "{{ .Release.Name }}"
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeSelector: {}
  tolerations: []

  livenessProbe:
    initialDelaySeconds: 60
    timeoutSeconds: 2
  readinessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 1

  resources: {}
    # limits:
    #   cpu: "100m"
    #   memory: "1024Mi"
    # requests:
    #   cpu: "100m"
    #   memory: "1024Mi"

  ## Add volumes and mounts
  extraVolumes: |

  extraVolumeMounts: |

  podDisruptionBudget: {}
    # maxUnavailable: 1
    # minAvailable: 1

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

    labels: {}
    # key: value

    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP

    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000

    port: 80

  ## Ingress configuration.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ingress:
    enabled: false
    path: /

    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # ingress.kubernetes.io/affinity: cookie

    ## List of hosts for the ingress
    hosts:
      - hydra.example.com

    ## TLS configuration
    tls: []
    # - hosts:
    #     - hydra.example.com
    #   secretName: tls-hydra

  ## Persistence configuration
  persistence:
    # If true, the Postgres chart is deployed
    deployPostgres: false

    # The database vendor. Can be either "postgres", "mysql" or "memory"
    dbVendor: memory

    dbName: hydra
    dbHost: hydra
    dbPort: 5432
    dbUser: hydra
    dbPassword: ""

postgresql:
  ### PostgreSQL User to create.
  postgresUser: hydra

  ## PostgreSQL Password for the new user.
  postgresPassword: ""

  ## PostgreSQL Database to create.
  postgresDatabase: hydra

  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  persistence:
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    enabled: false

