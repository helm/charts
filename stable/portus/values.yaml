# Default values for portus.
nameOverride: portus
portus:
  replicaCount: 1
  fqdn: portus.registry.example.com
  image:
    repository: opensuse/portus
    tag: 2.2
    pullPolicy: IfNotPresent
  config:
    signup: true # If enabled, then users can signup with the signup form
    first_user_admin: true # First user signing up will be admin
    delete: true # Allow admins and owners to delete images and tags
    gravatar: true # If enabled, then the profile picture will be picked from the Gravatar
    display_name: false # Allow users to have different display names on the web site
    user_permission:
      change_visibility: true # Allow users to change the visibility or their personal namespace
      manage_team: true # Allow users to create/modify teams if they are an owner of it
      manage_namespace: true # Allow users to create/modify namespaces if they are an owner of it
    email:
      from: "portus@example.com"
      name: "Portus"
      reply_to: "no-reply@example.com"
      smtp:
        enabled: false
        address: "smtp.example.com"
        port: 587
        domain: "example.com"
  secrets:
    password: "" # Randomly generated if omitted
    email:
      smtp:
        user_name: "username@example.com"
        password: "password"
    db:
      host: "example-mariadb.default.svc.cluster.local"
      catalog: "portusdb"
      username: "portus"
      password: "portuspass"
  resources:
    limits:
      cpu: 500m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 384Mi
registry:
  replicaCount: 2
  fqdn: docker.registry.example.com
  image:
    repository: docker.io/library/registry
    tag: 2.6.1
    pullPolicy: IfNotPresent
  config:
    debug-addr: localhost:5001
    s3:
      region: "us-east-1"
      regionendpoint: "" #empty for AWS s3
      bucket: registry
      rootDirectory: portus
      secure: true
  secrets:
    #https://github.com/docker/distribution/blob/master/docs/configuration.md#http
    ha-shared-secret: "" #Randomly generated if omitted
    s3:
      access-key: ""
      secret-key: ""
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi

##
## Minio chart configuration
##
minio:
  enabled: true
  imageTag: RELEASE.2017-07-24T18-27-35Z
  # Minio access/secret keys for the in-cluster S3 usage
  # Minio is not exposed publically
  serviceType: ClusterIP
  accessKey: portusadmin
  secretKey: portusadmin
  # Tag used by post-install hook to create bucket
  client:
    imageRepository: minio/mc
    imageTag: RELEASE.2017-06-15T03-38-43Z

##
## MariaDB chart configuration
##
mariadb:
  enabled: true
  serviceType: ClusterIP
  mariadbUser: portus
  ## MariaDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  mariadbRootPassword: portusadmin
  mariadbPassword: portuspass
  mariadbDatabase: portusdb
  
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## A manually manage Persistent Volume Claim
    ## Requires mariadb.persistence.enable: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:
    accessMode: ReadWriteOnce
    size: 8Gi
