{{- $scheme := coalesce (and (eq .Values.vault.config.listener.tcp.tls_disable false) "https") "http" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vault.fullname" . }}
  labels:
    app: {{ template "vault.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
      maxSurge: {{ .Values.maxSurge }}
  selector:
    matchLabels:
      app: {{ template "vault.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "vault.name" . }}
        release: {{ .Release.Name }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
    spec:
      subdomain: "{{ template "vault.fullname" . }}"
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - sh
          - "-c"
          - |
            export POD_DNS="${POD_IP//./-}.${POD_NAMESPACE}.pod.cluster.local"
            export VAULT_ADDR="${VAULT_SCHEME}://${POD_DNS}:8200"
            export VAULT_API_ADDR="${VAULT_SCHEME}://${POD_DNS}:8200"
            export VAULT_CLUSTER_ADDR="${VAULT_SCHEME}://${POD_DNS}:8201"
        {{- if .Values.vault.dev }}
            exec vault server -dev -dev-listen-address [::]:8200
        {{- else }}
            exec vault server -config /vault/config/config.json
        {{- end }}
        {{- if .Values.lifecycle }}
        lifecycle:
{{ tpl .Values.lifecycle . | indent 10 }}
        {{- end }}
        ports:
        - containerPort: 8200
          name: api
        - containerPort: 8201
          name: cluster
        livenessProbe:
          # Alive if it is listening for clustering traffic
          httpGet:
            path: /v1/sys/health?standbycode=200&sealedcode=200&uninitcode=200
            port: api
            scheme: {{ $scheme | upper }}
        readinessProbe:
          # Ready depends on preference
          httpGet:
            path: "/v1/sys/health?
            {{- range $key, $value := .Values.vault.readinessParams -}}
              {{ $key }}={{ $value }}&
            {{- end -}}"
            port: api
            scheme: {{ $scheme | upper }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            add:
            - IPC_LOCK
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: VAULT_SCHEME
            value: {{ $scheme | quote }}
          - name: VAULT_LOG_LEVEL
            value: {{ .Values.vault.logLevel | quote }}
        {{- if .Values.vault.extraEnv }}
{{ toYaml .Values.vault.extraEnv | indent 10 }}
        {{- end }}
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config/
        - name: vault-root
          mountPath: /root/
        {{- range .Values.vault.customSecrets }}
        - name: {{ .secretName }}
          mountPath: {{ .mountPath }}
        {{- end }}
{{- if .Values.vault.extraContainers }}
{{ toYaml .Values.vault.extraContainers | indent 6}}
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      {{- if .Values.affinity }}
        {{- if .Values.consulAgent.join }}
      - name: {{ .Chart.Name }}-consul-agent
        image: "{{ .Values.consulAgent.repository }}:{{ .Values.consulAgent.tag }}"
        imagePullPolicy: {{ .Values.consulAgent.pullPolicy }}
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: consul-data
          mountPath: /etc/consul
        {{- if .Values.consulAgent.gossipKeySecretName }}
        - name: consul-gossip-key
          mountPath: /etc/consul/secrets
          readOnly: true
        {{- end }}
        command:
          - "/bin/sh"
          - "-ec"
          - |
            {{- if .Values.consulAgent.gossipKeySecretName }}
            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi
            {{- end }}

            exec /bin/consul agent \
              $GOSSIP_KEY \
              -join={{- .Values.consulAgent.join }} \
              -data-dir=/etc/consul
        {{- end }}
      affinity:
{{ tpl .Values.affinity . | indent 8 }}
      {{- end }}
      volumes:
        - name: vault-config
          configMap:
            name: "{{ template "vault.fullname" . }}-config"
        - name: vault-root
          emptyDir: {}
        {{- range .Values.vault.customSecrets }}
        - name: {{ .secretName }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
{{- if .Values.vault.extraVolumes }}
{{ toYaml .Values.vault.extraVolumes | indent 8}}
{{- end }}
        {{- if .Values.consulAgent.join }}
        - name: consul-data
          emptyDir: {}
        {{- end }}
        {{- if .Values.consulAgent.gossipKeySecretName }}
        - name: consul-gossip-key
          secret:
            secretName: {{ .Values.consulAgent.gossipKeySecretName }}
        {{- end }}
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret }}
      {{- end }}
