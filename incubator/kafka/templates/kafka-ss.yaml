# headless service for petset DNS
apiVersion: v1
kind: Service
metadata:
  name: "{{ printf "%s-zookeeper-%s" .Release.Name .Values.zookeeper.Name | trunc 63 }}"
spec:
  ports:
  - port: 2181
    name: client
  selector:
    component: "{{.Release.Name}}"

# A headless service to create DNS records
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ printf "%s-broker-%s" .Release.Name .Values.Name | trunc 63 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: 9092
  clusterIP: None
  selector:
    component: "{{.Release.Name}}-{{.Values.Component}}"
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 63 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
spec:
  ports:
  - port: 9092
  selector:
    component: "{{.Release.Name}}-{{.Values.Component}}"
    app: kafka
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 63 }}"
  labels:
    app: kafka
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
spec:
  serviceName: "{{ printf "%s-broker-%s" .Release.Name .Values.Name | trunc 63 }}"
  replicas: {{ default 3 .Values.Replicas }}
  template:
    metadata:
      labels:
        app: kafka
        component: "{{.Release.Name}}-{{.Values.Component}}"
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        pod.alpha.kubernetes.io/init-containers: '[
        ]'
    spec:
      containers:
      - name: "{{ printf "%s-broker-%s" .Release.Name .Values.Name | trunc 63 }}"
        image: "{{.Values.Image}}:{{.Values.ImageTag}}"
        imagePullPolicy: "{{.Values.ImagePullPolicy}}"
        livenessProbe:
          exec:
            command:
              - bin/kafka-topics.sh
              - --zookeeper
              - "{{ printf "%s-zookeeper-%s" .Release.Name .Values.zookeeper.Name | trunc 63 }}:2181"
              - --list
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: liveness
        readinessProbe:
          exec:
            command:
              - bin/kafka-topics.sh
              - --zookeeper
              - "{{ printf "%s-zookeeper-%s" .Release.Name .Values.zookeeper.Name | trunc 63 }}:2181"
              - --list
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: readiness
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          limits:
            cpu: "{{ .Values.MaxCpu }}"
            memory: "{{ .Values.MaxMemory }}"
          requests:
            cpu: "{{ .Values.Cpu }}"
            memory: "{{ .Values.Memory }}"
        command:
        - sh
        - -c
        - "./bin/kafka-server-start.sh config/server.properties --override zookeeper.connect={{ printf "%s-zookeeper-%s" .Release.Name .Values.zookeeper.Name | trunc 63 }}:2181/ --override broker.id=${HOSTNAME##*-}"
        volumeMounts:
        - name: datadir
          mountPath: "{{ .Values.DataDirectory }}"
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.Storage}}
