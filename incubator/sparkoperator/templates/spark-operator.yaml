# If the admission webhook is enabled, then a post-install step is required
# to generate and install the secret in the operator namespace.

# In the post-install hook, the token corresponding to the operator service account
# is used to authenticate with the Kubernetes API server to install the secret bundle.

{{ if .Values.createOperatorNamespace }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.operatorNamespace }}
{{ end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sparkoperator
  namespace: {{ .Values.operatorNamespace }}
---
{{ if .Values.enableWebhook }}
apiVersion: batch/v1
kind: Job
metadata:
  name: sparkoperator-init
  namespace: {{ .Values.operatorNamespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sparkoperator
        app.kubernetes.io/version: {{ .Values.operatorVersion }}
    spec:
      serviceAccountName: sparkoperator
      restartPolicy: OnFailure
      containers:
      - name: main
        image: {{ .Values.operatorImageName }}:{{ .Values.operatorVersion }}
        imagePullPolicy: IfNotPresent
        command: ["/usr/bin/gencerts.sh", "-n", "{{ .Values.operatorNamespace }}", "-p"]
{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sparkoperator
  namespace: {{ .Values.operatorNamespace }}
  labels:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sparkoperator
      app.kubernetes.io/version: {{ .Values.operatorVersion }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- if .Values.enableMetrics }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
        prometheus.io/path: "/metrics"
      {{- end }}
      labels:
        app.kubernetes.io/name: sparkoperator
        app.kubernetes.io/version: {{ .Values.operatorVersion }}
      initializers:
        pending: []
    spec:
      serviceAccountName: sparkoperator
      {{- if .Values.enableWebhook }}
      volumes:
        - name: webhook-certs
          secret:
            secretName: spark-webhook-certs
      {{- end }}
      containers:
      - name: sparkoperator
        image: {{ .Values.operatorImageName }}:{{ .Values.operatorVersion }}
        imagePullPolicy: IfNotPresent
        {{- if .Values.enableWebhook }}
        volumeMounts:
          - name: webhook-certs
            mountPath: /etc/webhook-certs
        {{- end }}
        {{- if .Values.enableMetrics }}
        ports:
          - containerPort: 10254
        {{ end }}
        command: ["/usr/bin/spark-operator"]
        {{- if and (.Values.enableMetrics) (.Values.enableWebhook) }}
        args:
        - -enable-metrics=true
        - -metrics-labels=app_type
        - -enable-webhook=true
        - -webhook-svc-namespace={{ .Values.operatorNamespace }}
        - -logtostderr
        {{- else if (.Values.enableMetrics) }}
        args:
        - -enable-metrics=true
        - -metrics-labels=app_type
        - -logtostderr
        {{- else if (.Values.enableWebhook) }}
        args:
        - -enable-webhook=true
        - -webhook-svc-namespace={{ .Values.operatorNamespace }}
        - -logtostderr
        {{- else }}
        args:
        - -logtostderr
        {{- end }}
---
{{ if .Values.enableWebhook }}
kind: Service
apiVersion: v1
metadata:
  name: spark-webhook
  namespace: {{ .Values.operatorNamespace }}
spec:
  ports:
    - port: 443
      targetPort: 8080
      name: webhook
  selector:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
{{ end }}
