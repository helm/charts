# If the admission webhook is enabled, then the following pre-install steps are performed
# 1. Create the serviceAccount "sparkoperator"
# 2. Create the namespace ("sparkoperator" by default)
# 3. Generate and install the secret in the namespace created in step 2.

# Steps above need to be executed in the order presented because the first two steps are the pre-requisites
# for step 3 (e.g. In step 3, the token corresponding to the service account created in step 1 is used to communicate
# with the Kubernetes API server to install the secret bundle. The order are specified using helm.sh/hook-weight
# annotations.

{{ if .Values.enableWebhook }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.operatorNamespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-10"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sparkoperator
  namespace: {{ .Values.operatorNamespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "-5"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: sparkoperator
  namespace: {{ .Values.operatorNamespace }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "0"
  labels:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sparkoperator
        app.kubernetes.io/version: {{ .Values.operatorVersion }}
    spec:
      serviceAccountName: sparkoperator
      restartPolicy: OnFailure
      containers:
      - name: main
        image: {{ .Values.operatorImageName }}:{{ .Values.operatorVersion }}
        imagePullPolicy: Always
        command: ["/usr/bin/gencerts.sh", "-n", "{{ .Values.operatorNamespace }}", "-p"]
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: sparkoperator
  namespace: {{ .Values.operatorNamespace }}
  labels:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sparkoperator
      app.kubernetes.io/version: {{ .Values.operatorVersion }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sparkoperator
        app.kubernetes.io/version: {{ .Values.operatorVersion }}
      initializers:
        pending: []
    spec:
      serviceAccountName: sparkoperator
      volumes:
        - name: webhook-certs
          secret:
            secretName: spark-webhook-certs
      containers:
      - name: sparkoperator
        image: {{ .Values.operatorImageName }}:{{ .Values.operatorVersion }}
        imagePullPolicy: Always
        volumeMounts:
          - name: webhook-certs
            mountPath: /etc/webhook-certs
        command: ["/usr/bin/spark-operator"]
        args:
        - -logtostderr
        - -enable-webhook=true
---
kind: Service
apiVersion: v1
metadata:
  name: spark-webhook
  namespace: {{ .Values.operatorNamespace }}
spec:
  ports:
    - port: 443
      targetPort: 8080
      name: webhook
  selector:
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/version: {{ .Values.operatorVersion }}
{{ end }}
