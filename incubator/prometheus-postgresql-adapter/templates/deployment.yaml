apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
{{- with .Values.deploymentAnnotations }}
{{ toYaml . | indent 4 }}
{{- end }}
  name: {{ include "prometheus-postgresql-adapter.fullname" . | quote }}
  labels:
{{ include "prometheus-postgresql-adapter.labels.standard" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/name: {{ include "prometheus-postgresql-adapter.name" . | quote }}
  template:
    metadata:
      annotations:
        {{- if .Values.prometheus.exporter.enabled }}
        prometheus.io/path: {{ .Values.webTelemetryPath | quote }}
        prometheus.io/port: {{ .Values.webListenAddress | quote }}
        prometheus.io/probe: {{ .Values.prometheus.exporter.probe | quote }}
        prometheus.io/scrape: {{ .Values.prometheus.exporter.scrape | quote }}
        {{- end }}
        {{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/name: {{ include "prometheus-postgresql-adapter.name" . | quote }}
        helm.sh/chart: {{ include "prometheus-postgresql-adapter.chart" . | quote }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ["/prometheus-postgresql-adapter"]
          args:
          - -log.level={{ .Values.logLevel }}
          {{- if .Values.pgDatabase }}
          - -pg.database={{ .Values.pgDatabase }}
          {{- end }}
          - -pg.host={{ required "A valid PostgreSQL endpoint .Values.pgHost is required!" .Values.pgHost }}
          {{- if .Values.pgPassword }}
          - -pg.password={{ .Values.pgPassword }}
          {{- end }}
          {{- if .Values.pgPort }}
          - -pg.port={{ .Values.pgPort }}
          {{- end }}
          {{- if .Values.pgSchema }}
          - -pg.schema={{ .Values.pgSchema }}
          {{- end }}
          {{- if .Values.pgTablePrefix }}
          - -pg.table={{ .Values.pgTablePrefix }}
          {{- end }}
          {{- if .Values.pgUser }}
          - -pg.user={{ .Values.pgUser }}
          {{- end }}
          - -web.listen-address=:{{ .Values.webListenAddress }}
          - -web.telemetry-path={{ .Values.webTelemetryPath }}
          {{- if .Values.extraArgs }}
            {{- range $key, $value := .Values.extraArgs }}
              {{- if $value }}
          - -{{ $key }}={{ $value }}
              {{- else }}
          - -{{ $key }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.extraEnv }}
          env:
            {{- range $key, $value := .Values.extraEnv }}
          - name: {{ $key }}
            value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.webListenAddress }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.webListenAddress }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.webListenAddress }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
