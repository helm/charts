# Default values for druid.

image:
  repository: apache/druid
  tag: 0.18.1
  pullPolicy: IfNotPresent
  pullSecrets: []

configVars:
  DRUID_XMX: 1g
  DRUID_XMS: 1g
  DRUID_MAXNEWSIZE: 250m
  DRUID_NEWSIZE: 250m
  DRUID_MAXDIRECTMEMORYSIZE: 10000m
  DRUID_USE_CONTAINER_IP: "true"
  druid_processing_numThreads: "3"
  druid_extensions_loadList: '["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage"]'
  druid_metadata_storage_type: postgresql
  druid_metadata_storage_connector_connectURI: jdbc:postgresql://postgres:5432/druid
  druid_metadata_storage_connector_user: druid
  druid_metadata_storage_connector_password: druid
  druid_coordinator_balancer_strategy: cachingCost
  druid_indexer_runner_javaOptsArray: '["-server", "-Xmx1g", "-Xms1g", "-XX:MaxDirectMemorySize=3g", "-Duser.timezone=UTC", "-Dfile.encoding=UTF-8", "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager"]'
  druid_indexer_fork_property_druid_processing_buffer_sizeBytes: '268435456'
  druid_storage_type: local
  druid_indexer_logs_type: file
  druid_indexer_logs_directory: /opt/data/indexing-logs
  druid_emitter: noop
  druid_emitter_logging_logLevel: debug
  druid_emitter_http_recipientBaseUrl: http://druid_exporter_url:druid_exporter_port/druid
  DRUID_LOG4J: <?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root><Logger name="org.apache.druid.jetty.RequestLog" additivity="false" level="DEBUG"><AppenderRef ref="Console"/></Logger></Loggers></Configuration>

gCloudStorage:
  enabled: false
  secretName: google-cloud-key

broker:
  name: broker
  replicaCount: 1
  port: 8082
  serviceType: ClusterIP

  config:
    JAVA_OPTS: "-Xms2G -Xmx2G -XX:MaxDirectMemorySize=8g"
    # druid_monitoring_monitors: '["org.apache.druid.client.cache.CacheMonitor", "org.apache.druid.server.metrics.QueryCountStatsMonitor", "org.apache.druid.java.util.metrics.SysMonitor"]'

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 8Gi
    # requests:
    #   cpu: 250m
    #   memory: 4Gi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

coordinator:
  name: coordinator
  replicaCount: 1
  port: 8081
  serviceType: ClusterIP

  config:
    JAVA_OPTS: "-Xms1G -Xmx1G"

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 2Gi
    # requests:
    #   cpu: 250m
    #   memory: 512Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

overlord:
  enabled: false
  name: overlord
  replicaCount: 1
  port: 8081
  serviceType: ClusterIP

  javaOpts: "-Xms1G -Xmx1G"

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

historical:
  name: historical
  replicaCount: 1
  port: 8083
  serviceType: ClusterIP

  config:
    JAVA_OPTS: "-Xms2G -Xmx2G -XX:MaxDirectMemorySize=8g"
    # druid_monitoring_monitors: '["org.apache.druid.client.cache.CacheMonitor", "org.apache.druid.server.metrics.HistoricalMetricsMonitor", "org.apache.druid.server.metrics.QueryCountStatsMonitor", "org.apache.druid.java.util.metrics.SysMonitor"]'

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "4Gi"
    # storageClass: "ssd"

  antiAffinity: "soft"

  nodeAffinity: {}

  nodeSelector: {}

  tolerations: []

  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 8Gi
    # requests:
    #   cpu: 250m
    #   memory: 4Gi

  ## (dict) If specified, apply these annotations to each master Pod
  podAnnotations: {}
  #   example: master-foo

  podDisruptionBudget:
    enabled: false
    # minAvailable: 2
    maxUnavailable: 1

  updateStrategy:
    type: RollingUpdate

middleManager:
  name: middle-manager
  replicaCount: 1
  port: 8091
  serviceType: ClusterIP

  config:
    JAVA_OPTS: "-Xms1G -Xmx1G"
    # druid_monitoring_monitors: '["org.apache.druid.java.util.metrics.SysMonitor"]'

  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "4Gi"
    # storageClass: "ssd"

  antiAffinity: "soft"

  nodeAffinity: {}

  nodeSelector: {}

  tolerations: []

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 2Gi
    # requests:
    #   cpu: 250m
    #   memory: 512Mi

  ## (dict) If specified, apply these annotations to each master Pod
  podAnnotations: {}
  #   example: master-foo

  podDisruptionBudget:
    enabled: false
    # minAvailable: 2
    maxUnavailable: 1

  updateStrategy:
    type: RollingUpdate

router:
  enabled: true
  name: router
  replicaCount: 1
  port: 8888
  serviceType: ClusterIP

  config:
    JAVA_OPTS: "-Xms1G -Xmx1G"

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 2Gi
    # requests:
    #   cpu: 250m
    #   memory: 512Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

# ------------------------------------------------------------------------------
# Zookeeper:
# ------------------------------------------------------------------------------

# zkHosts: druid-zookeeper-headless:2181

zookeeper:
  enabled: true
  ## Environmental variables to set in Zookeeper
  ##
  env:
    ## The JVM heap size to allocate to Zookeeper
    ZK_HEAP_SIZE: "512M"
  ## Configure Zookeeper persistence
  persistence:
    enabled: true
  ## Configure Zookeeper headless
  headless:
    publishNotReadyAddresses: true


# ------------------------------------------------------------------------------
# MySQL:
# ------------------------------------------------------------------------------
mysql:
  enabled: false
  mysqlRootPassword: druidroot
  mysqlUser: druid
  mysqlPassword: druid
  mysqlDatabase: druid
  configurationFiles:
    mysql_collate.cnf: |-
      [mysqld]
      character-set-server=utf8
      collation-server=utf8_unicode_ci

# ------------------------------------------------------------------------------
# postgres:
# ------------------------------------------------------------------------------
postgresql:
  enabled: true
  postgresqlUsername: druid
  postgresqlPassword: druid
  postgresqlDatabase: druid
  persistence:
    enabled: true
  service:
    port: 5432

# Secrets
