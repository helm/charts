apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: "{{ template "fullname" . }}-core"
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.numberOfCores }}
  template:
    metadata:
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "name" . }}
        component: "{{ .Values.coreComponent }}"
    spec:
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        env:
          - name: NEO4J_dbms_mode
            value: CORE
          - name: NUMBER_OF_CORES
            value: "{{ .Values.numberOfCores }}"
        command:
          - "/bin/bash"
          - "-ecx"
          - |
            export NEO4J_dbms_connectors_default__advertised__address=$(hostname -f)
            export NEO4J_causal__clustering_discovery__advertised__address=$(hostname -f)::5000
            export NEO4J_causal__clustering_transaction__advertised__address=$(hostname -f):6000
            export NEO4J_causal__clustering_raft__advertised__address=$(hostname -f):7000

            echo "causal_clustering.raft_messages_log_enable=true" >> conf/neo4j.conf
            echo "dbms.security.auth_enabled=false" >> conf/neo4j.conf

            STATEFULSET_NAME="{{ template "fullname" . }}"
            MEMBERS=""
            for id in $(seq 0 $(($NUMBER_OF_CORES-1))) ; do
                  token="${STATEFULSET_NAME}-core-$id.${STATEFULSET_NAME}.default.svc.cluster.local:5000"
                  MEMBERS="${MEMBERS}${MEMBERS:+,}${token}"
            done

            export NEO4J_causal__clustering_initial__discovery__members=$MEMBERS
            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: {{ .Values.discoveryPort }}
          name: discovery
        - containerPort: {{ .Values.txPort }}
          name: tx
        - containerPort: {{ .Values.raftPort }}
          name: raft
        - containerPort: {{ .Values.httpPort }}
          name: browser
        - containerPort: {{ .Values.boltPort }}
          name: bolt
        securityContext:
          privileged: true
        volumeMounts:
        - name: datadir
          mountPath: /data
        resources:
{{ toYaml .Values.resources | indent 10 }}

{{- if .Values.persistentVolumeClaimEnabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- if .Values.storageClass | quote }}
          volume.beta.kubernetes.io/storage-class: {{ .Values.storageClass | quote }}
        {{- else }}
          volume.beta.kubernetes.io/storage-class: anything
        {{- end }}
        {{- range $key, $value := .Values.storageAnnotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.storageAccessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.storageSize | quote }}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}