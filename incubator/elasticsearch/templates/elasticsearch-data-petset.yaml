apiVersion: apps/v1alpha1
kind: PetSet
metadata:
  name: "{{ printf "%s-data-%s" .Release.Name .Values.Name | trunc 24 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
    type: data
  annotations:
    helm.sh/created: {{.Release.Time.Seconds | quote }}
spec:
  serviceName: "{{ printf "%s-data-%s" .Release.Name .Values.Name | trunc 24 }}"
  replicas: {{default 3 .Values.DataReplicas }}
  template:
    metadata:
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        component: "{{.Release.Name}}-{{.Values.Component}}"
        type: data
      annotations:
        helm.sh/created: {{.Release.Time.Seconds | quote }}
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      serviceAccountName: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
      containers:
      - name: elasticsearch
        env:
        - name: SERVICE
          value: "{{ printf "%s-cluster-%s" .Release.Name .Values.Name | trunc 24 }}"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_MASTER
          value: "false"
        - name: ES_HEAP_SIZE
          value: "{{.Values.DataHeapSize}}"
        image: "{{.Values.Image}}:{{.Values.ImageTag}}"
        imagePullPolicy: "{{.Values.ImagePullPolicy}}"
        ports:
        - containerPort: 9300
          name: transport
        resources:
          requests:
            cpu: "{{.Values.DataCpuRequests}}"
            memory: "{{.Values.DataMemoryRequests}}"
          limits:
            cpu: "{{.Values.DataCpuLimits}}"
            memory: "{{.Values.DataMemoryLimits}}"
        livenessProbe:
          httpGet:
            path: /
            port: 9200
          initialDelaySeconds: 30
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 9200
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elasticsearch-data
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash","/pre-stop-hook.sh"]
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
      annotations:
        volume.{{ .Values.DataStorageClassVersion }}.kubernetes.io/storage-class: "{{ .Values.DataStorageClass }}"
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: "{{.Values.DataStorage}}"
