---
apiVersion: v1
kind: Pod
metadata:
  name: utils
spec:
  restartPolicy: "Never"
  volumes:
  - name: shared
    persistentVolumeClaim:
     claimName: shared
  - name: dockersocket
    hostPath:
      path: /var/run/docker.sock
  - name: composer-credentials
    hostPath:
      path: /composer
  containers:
  - name: cryptogen
    image: {{ .Values.blockchain.toolsImage }}
    imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
    command:
        - sh
        - -c
        - |
          cryptogen generate --config /sampleconfig/crypto-config.yaml &&
          cp -r crypto-config /shared/

          for file in $(find /shared/ -iname *_sk); do
            dir=$(dirname $file); mv ${dir}/*_sk ${dir}/key.pem
          done

          find /shared -type d | xargs chmod a+rx &&
          find /shared -type f | xargs chmod a+r &&
          touch /shared/status_cryptogen_complete
    volumeMounts:
    - mountPath: /shared
      name: shared
  - name: configtxgen
    image: {{ .Values.blockchain.toolsImage }}
    imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
    command:
      - sh
      - -c
      - |
        sleep 1

        while [ ! -f /shared/status_cryptogen_complete ]; do
          echo Waiting for cryptogen
          sleep 1
        done

        echo 'sample config is =>' &&
        ls /sampleconfig &&
        cp /sampleconfig/configtx.yaml /shared/configtx.yaml &&
        echo 'shared after copy is =>' &&
        ls /shared &&
        cd /shared/ &&
        configtxgen -profile TwoOrgsOrdererGenesis -outputBlock orderer.block &&
        find /shared -type d | xargs chmod a+rx &&
        find /shared -type f | xargs chmod a+r &&
        touch /shared/status_configtxgen_complete &&
        rm -f /shared/status_cryptogen_complete
    env:
     - name: PEERHOST1
       value: blockchain-org1peer1
     - name: PEERPORT1
       value: "5010"
     - name: PEERHOST2
       value: blockchain-org2peer1
     - name: PEERPORT2
       value: "5010"
     - name: ORDERER_URL
       value: blockchain-orderer:31010
     - name: FABRIC_CFG_PATH
       value: /shared
    # - name: GODEBUG
    #   value: "netdns=go"
    volumeMounts:
    - mountPath: /shared
      name: shared
  - name: bootstrap
    image: {{ .Values.blockchain.toolsImage }}
    imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
    command:
      - sh
      - -c
      - |
        sleep 1
        echo "Starting bootstrap"

        while [ ! -f /shared/status_configtxgen_complete ]; do
          echo Waiting for configtxgen
          sleep 1
        done

        echo \"Starting bootstrap\" &&
        cp -r /sampleconfig/cas /shared &&
        echo \"Done copying\" &&
        touch /shared/bootstrapped &&
        rm -f /shared/status_configtxgen_complete &&
        mkdir -p /home/composer/.composer &&
        chown 1000 /home/composer/.composer &&
        echo 'Done with bootstrapping'
    volumeMounts:
    - mountPath: /shared
      name: shared
    - mountPath: /home
      name: composer-credentials
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-orderer
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: orderer
    spec:
      volumes:
      - name: shared
        persistentVolumeClaim:
         claimName: shared

      containers:
      - name: orderer
        image: {{ .Values.blockchain.ordererImage }}
        imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
        command:
          - sh
          - -c
          - |
            sleep 1

            while [ ! -f /shared/bootstrapped ]; do
              echo Waiting for bootstrap
              sleep 1
            done

            touch /shared/status_orderer_complete &&
            orderer
        env:
        - name: ORDERER_CFG_PATH
          value: /shared/
        - name: ORDERER_GENERAL_LEDGERTYPE
          value: file
        - name: ORDERER_FILELEDGER_LOCATION
          value: /mnt/ledger/orderer1
        - name: ORDERER_GENERAL_BATCHTIMEOUT
          value: 1s
        - name: ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT
          value: "10"
        - name: ORDERER_GENERAL_MAXWINDOWSIZE
          value: "1000"
        - name: ORDERER_GENERAL_ORDERERTYPE
          value: solo
        - name: ORDERER_GENERAL_LISTENADDRESS
          value: 0.0.0.0
        - name: ORDERER_GENERAL_LISTENPORT
          value: "31010"
        - name: ORDERER_GENERAL_LOGLEVEL
          value: debug
        - name: ORDERER_GENERAL_LOCALMSPDIR
          value: /shared/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp
        - name: ORDERER_GENERAL_LOCALMSPID
          value: OrdererMSP
        - name: ORDERER_GENERAL_GENESISMETHOD
          value: file
        - name: ORDERER_GENERAL_GENESISFILE
          value: /shared/orderer.block
        - name: ORDERER_GENERAL_GENESISPROFILE
          value: initial
        - name: ORDERER_GENERAL_TLS_ENABLED
          value: "false"
        - name: GODEBUG
          value: "netdns=go"
        volumeMounts:
        - mountPath: /shared
          name: shared

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-ca
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: ca
    spec:
      volumes:
      - name: shared
        persistentVolumeClaim:
         claimName: shared

      containers:
      - name: ca
        image: {{ .Values.blockchain.caImage }}
        imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
        command:
        - sh
        - -c
        - |
          sleep 1
          
          while [ ! -f /shared/bootstrapped ]; do
            echo Waiting for bootstrap
            sleep 1
          done

          touch /shared/status_fabricca_complete &&
          fabric-ca-server start -c ${CONFIGYAML}
        env:
        - name: CONFIGYAML
          value: /shared/cas/ca.yaml
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value: /shared/crypto-config/ordererOrganizations/example.com/ca/ca.example.com-cert.pem
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /mnt/crypto-config/ordererOrganizations/example.com/ca/948030ba41c19d662d767eb6f0d8196ff95c87f8f838fc4b8951f886357d82e8_sk
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "false"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /certs/ca0a-cert.pem
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /certs/ca0a-key.pem
        - name: GODEBUG
          value: "netdns=go"
        volumeMounts:
        - mountPath: /shared
          name: shared

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-org1peer1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: org1peer1
    spec:
      volumes:
      - name: shared
        persistentVolumeClaim:
         claimName: shared
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock

      containers:
      - name: org1peer1
        image: {{ .Values.blockchain.peerImage }}
        imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
        command:
          - sh
          - -c
          - |
            sleep 1

            while [ ! -f /shared/bootstrapped ]; do
              echo Waiting for bootstrap
              sleep 1
            done

            touch /shared/status_org1peer1_complete &&
            peer node start --peer-defaultchain=false
        env:
        - name: CORE_PEER_ADDRESSAUTODETECT
          value: "true"
        - name: CORE_PEER_NETWORKID
          value: nid1
        - name: CORE_PEER_ADDRESS
          value: blockchain-org1peer1:5010
        - name: CORE_PEER_LISTENADDRESS
          value: 0.0.0.0:5010
        - name: CORE_PEER_EVENTS_ADDRESS
          value: 0.0.0.0:5011
        - name: CORE_PEER_COMMITTER_ENABLED
          value: "true"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_DISCOVERY_PERIOD
          value: 60s
        - name: CORE_PEER_DISCOVERY_TOUCHPERIOD
          value: 60s
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org1MSP
        - name: CORE_PEER_MSPCONFIGPATH
          value: /shared/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_LOGGING_PEER
          value: debug
        - name: CORE_LOGGING_CAUTHDSL
          value: debug
        - name: CORE_LOGGING_GOSSIP
          value: debug
        - name: CORE_LOGGING_LEDGER
          value: debug
        - name: CORE_LOGGING_MSP
          value: info
        - name: CORE_LOGGING_POLICIES
          value: debug
        - name: CORE_LOGGING_GRPC
          value: debug
        - name: CORE_PEER_TLS_ENABLED
          value: "false"
        - name: CORE_LEDGER_STATE_STATEDATABASE
          value: goleveldb
        - name: PEER_CFG_PATH
          value: peer_config/
        - name: FABRIC_CFG_PATH
          value: /etc/hyperledger/fabric/
        - name: ORDERER_URL
          value: blockchain-orderer:31010
        - name: GODEBUG
          value: "netdns=go"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-org2peer1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: org2peer1
    spec:
      volumes:
      - name: shared
        persistentVolumeClaim:
         claimName: shared
      - name: dockersocket
        hostPath:
          path: /var/run/docker.sock

      containers:
      - name: org2peer1
        image: {{ .Values.blockchain.peerImage }}
        imagePullPolicy: {{ .Values.blockchain.pullPolicy }}
        command:
          - sh
          - -c
          - |
            sleep 1

            while [ ! -f /shared/bootstrapped ]; do
              echo Waiting for bootstrap
              sleep 1
            done

            touch /shared/status_org2peer1_complete &&
            peer node start --peer-defaultchain=false
        env:
        - name: CORE_PEER_ADDRESSAUTODETECT
          value: "true"
        - name: CORE_PEER_NETWORKID
          value: nid1
        - name: CORE_PEER_ADDRESS
          value: blockchain-org2peer1:5010
        - name: CORE_PEER_LISTENADDRESS
          value: 0.0.0.0:5010
        - name: CORE_PEER_EVENTS_ADDRESS
          value: 0.0.0.0:5011
        - name: CORE_PEER_COMMITTER_ENABLED
          value: "true"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_DISCOVERY_PERIOD
          value: 60s
        - name: CORE_PEER_DISCOVERY_TOUCHPERIOD
          value: 60s
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: CORE_PEER_LOCALMSPID
          value: Org2MSP
        - name: CORE_PEER_MSPCONFIGPATH
          value: /shared/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/
        - name: CORE_LOGGING_LEVEL
          value: debug
        - name: CORE_LOGGING_PEER
          value: debug
        - name: CORE_LOGGING_CAUTHDSL
          value: debug
        - name: CORE_LOGGING_GOSSIP
          value: debug
        - name: CORE_LOGGING_LEDGER
          value: debug
        - name: CORE_LOGGING_MSP
          value: debug
        - name: CORE_LOGGING_POLICIES
          value: debug
        - name: CORE_LOGGING_GRPC
          value: debug
        - name: CORE_PEER_ID
          value: org2peer1
        - name: CORE_PEER_TLS_ENABLED
          value: "false"
        - name: CORE_LEDGER_STATE_STATEDATABASE
          value: goleveldb
        - name: PEER_CFG_PATH
          value: peer_config/
        - name: FABRIC_CFG_PATH
          value: /etc/hyperledger/fabric/
        - name: ORDERER_URL
          value: blockchain-orderer:31010
        - name: GODEBUG
          value: "netdns=go"
        volumeMounts:
        - mountPath: /shared
          name: shared
        - mountPath: /host/var/run/docker.sock
          name: dockersocket
