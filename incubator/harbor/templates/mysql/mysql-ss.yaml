apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "{{ template "harbor.fullname" . }}-mysql"
  labels:
{{ include "helm.labels" . | indent 4 }}
    component: mysql
spec:
  replicas: 1
  serviceName: "{{ template "harbor.fullname" . }}-mysql"
  selector:
    matchLabels:
{{ include "helm.matchLabels" . | indent 6 }}
      component: mysql
  template:
    metadata:
      labels:
{{ include "helm.labels" . | indent 8 }}
        component: mysql
    spec:
      containers:
      - name: mysql
        image: {{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}
        imagePullPolicy: {{ .Values.mysql.image.pullPolicy }}
        resources:
{{ toYaml .Values.mysql.resources | indent 10 }}
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
               name: "{{ template "harbor.fullname" . }}-mysql"
               key: mysqlRootPassword
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      {{- if not .Values.persistence.enabled }}
      volumes:
      - name: "mysql-data"
        emptyDir: {}
      {{- end -}}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: "mysql-data"
      labels:
{{ include "helm.labels" . | indent 8 }}
    spec:
      accessModes: [{{ .Values.mysql.volumes.data.accessMode | quote }}]
      {{- if .Values.mysql.volumes.data.storageClass }}
      {{- if (eq "-" .Values.mysql.volumes.data.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.mysql.volumes.data.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.mysql.volumes.data.size | quote }}
  {{- end -}}
