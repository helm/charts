---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "busbar.fullname" . }}-web
  labels:
    app: {{ template "busbar.name" . }}-web
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "busbar.name" . }}-web
        release: "{{ .Release.Name }}"
        component: web
    spec:
      containers:
      - name: {{ template "busbar.fullname" . }}-web
        image: {{ .Values.busbarDockerImage }}:{{ .Values.busbarDockerTag }}
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        - bundle exec puma -e ${RAILS_ENV} -p ${PORT}
        env:
          - name: RAILS_ENV
            value: production
          - name: PORT
            value: "8080"
          - name: CLUSTER_NAME
            value: {{ .Values.clusterName }}
          - name: PRIVATE_DOMAIN_NAME
            value: {{ .Values.privateDomainName }}
          - name: PUBLIC_DOMAIN_NAME
            value: {{ .Values.publicDomainName }}
          - name: MONGODB_URL
            value: mongodb://{{ template "mongodb.fullname" . }}/busbar
          - name: REDIS_URL
            value: redis://{{ template "redis.fullname" . }}:6379
          - name: SECRET_KEY_BASE
            value: {{ randAlphaNum 128 }}
        ports:
        - containerPort: 8080
          name: web-port
          protocol: TCP
        resources:
{{ toYaml .Values.busbar.web.resources | indent 10 }}

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "busbar.fullname" . }}-worker
  labels:
    app: {{ template "busbar.name" . }}-worker
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "busbar.name" . }}-worker
        release: "{{ .Release.Name }}"
        component: worker
    spec:
      containers:
      - name: {{ template "busbar.fullname" . }}-worker
        image: {{ .Values.busbarDockerImage }}:{{ .Values.busbarDockerTag }}
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        - bundle exec sidekiq -e ${RAILS_ENV}
        env:
          - name: RAILS_ENV
            value: production
          - name: CLUSTER_NAME
            value: {{ .Values.clusterName }}
          - name: PRIVATE_DOMAIN_NAME
            value: {{ .Values.privateDomainName }}
          - name: PUBLIC_DOMAIN_NAME
            value: {{ .Values.publicDomainName }}
          - name: MONGODB_URL
            value: mongodb://{{ template "mongodb.fullname" . }}/busbar
          - name: REDIS_URL
            value: redis://{{ template "redis.fullname" . }}:6379
        resources:
{{ toYaml .Values.busbar.web.resources | indent 10 }}
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket
      volumes:
      - hostPath:
          path: /var/run/docker.sock
        name: docker-socket

---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: {{ template "kubeRegistry.fullname" . }}-external
  labels:
    app: {{ template "kubeRegistry.fullname" . }}-external
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "kubeRegistry.fullname" . }}-external
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: {{ template "kubeRegistry.fullname" . }}-external
        image: registry:2.2.1
        env:
        - name: REGISTRY_HTTP_ADDR
          value: :5000
        - name: REGISTRY_STORAGE
          value: s3
        - name: REGISTRY_STORAGE_S3_ACCESSKEY
          value: {{ .Values.registryStorageS3Accesskey }}
        - name: REGISTRY_STORAGE_S3_SECRETKEY
          value: {{ .Values.registryStorageS3Secretkey }}
        - name: REGISTRY_STORAGE_S3_REGION
          value: us-east-1
        - name: REGISTRY_STORAGE_S3_BUCKET
          value: {{ .Values.registryStorageS3Bucket }}
        - name: REGISTRY_STORAGE_S3_SECURE
          value: "true"
        ports:
        - containerPort: 5000
          name: registry
          protocol: TCP
        resources:
{{ toYaml .Values.kubeRegistry.resources | indent 10 }}

---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: {{ template "kubeConfig.fullname" . }}
  labels:
    app: {{ template "kubeConfig.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: {{ template "kubeConfig.fullname" . }}
    spec:
      containers:
      - name: {{ template "kubeConfig.fullname" . }}
        image: 127.0.0.1:5000/kubeconfig:latest
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /config
            port: 80
          initialDelaySeconds: 30
          timeoutSeconds: 30
      securityContext:
        runAsUser: 0
