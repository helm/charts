# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    clusterrole: {{.Values.ClusterRole | quote }}
    replicaset: {{.Values.ReplicaSet | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: {{.Values.PeerPort}}
    name: peer
  clusterIP: None
  selector:
    component: "{{.Release.Name}}-{{.Values.Component}}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{.Release.Name}}-mongo-config"
data:
  mongod.conf: |
    # mongod.conf
    # Where to store the data.
    storage:
      dbPath: /data/db
    net:
      port: 27017

    # Replication Options

    # in replicated mongo databases, specify the replica set name here
    sharding:
      clusterRole: {{.Values.ClusterRole}}
    replication:
      replSetName: {{.Values.ReplicaSet}}

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    clusterrole: {{.Values.ClusterRole | quote }}
    replicaset: {{.Values.ReplicaSet | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    component: "{{.Release.Name}}-{{.Values.Component}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
spec:
  serviceName: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
  replicas: {{default 3 .Values.Replicas}}
  template:
    metadata:
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        clusterrole: {{.Values.ClusterRole | quote }}
        replicaset: {{.Values.ReplicaSet | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        component: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
      annotations:
        "helm.sh/created": {{.Release.Time.Seconds | quote }}
        pod.alpha.kubernetes.io/init-containers: '[
            {
                "name": "install",
                "image": "{{.Values.InstallImage}}:{{.Values.InstallImageTag}}",
                "args": ["--work-dir=/work-dir"],
                "imagePullPolicy": "{{.Values.ImagePullPolicy}}",
                "volumeMounts": [
                    {
                        "name": "workdir",
                        "mountPath": "/work-dir"
                    },
                    {
                        "name": "config",
                        "mountPath": "/config"
                    }
                ]
            },
            {
                "name": "bootstrap",
                "image": "{{.Values.Image}}:{{.Values.ImageTag}}",
                "command": ["/work-dir/peer-finder"],
                "args": ["-on-start=\"/work-dir/on-start.sh\"", "-service={{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"],
                "imagePullPolicy": "{{.Values.ImagePullPolicy}}",
                "env": [
                  {
                      "name": "POD_NAMESPACE",
                      "valueFrom": {
                          "fieldRef": {
                              "apiVersion": "v1",
                              "fieldPath": "metadata.namespace"
                          }
                      }
                  },
                  {
                      "name": "RS",
                      "value": "{{.Values.ReplicaSet}}"
                  }
                ],
                "volumeMounts": [
                    {
                        "name": "workdir",
                        "mountPath": "/work-dir"
                    },
                    {
                        "name": "config",
                        "mountPath": "/config"
                    },
                    {
                        "name": "datadir",
                        "mountPath": "/data/db"
                    }
                ]
            }
        ]'
    spec:
      containers:
      - name: "{{ printf "%s-%s" .Release.Name .Values.Name | trunc 24 }}"
        image: "{{.Values.Image}}:{{.Values.ImageTag}}"
        imagePullPolicy: "{{.Values.ImagePullPolicy}}"
        ports:
        - containerPort: {{.Values.PeerPort}}
          name: peer
        resources:
          requests:
            cpu: "{{.Values.Cpu}}"
            memory: "{{.Values.Memory}}"
        command:
        - /usr/bin/mongod
        - --config=/config/mongod.conf
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/bin/mongo --eval 'printjson(db.serverStatus())'"
          initialDelaySeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /data/db
        - name: config
          mountPath: /config
      volumes:
      - name: config
        configMap:
          name: "{{.Release.Name}}-mongo-config"
      - name: workdir
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.beta.kubernetes.io/storage-class: {{.Values.StorageClass}}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{.Values.Storage}}
