apiVersion: {{ .Values.apiVersion }}
kind: Deployment
metadata:
  name: {{ template "imgproxy.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    app: {{ template "imgproxy.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "imgproxy.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "imgproxy.fullname" . }}
        release: {{ .Release.Name | quote }}
{{- if .Values.enablePrometheus }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
{{- end }}
    spec:
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: "{{ .Release.Name }}-docker-registry-secret"
{{- end }}
      containers:
      - name: "imgproxy"
        image: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: IMGPROXY_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: key
        - name: IMGPROXY_SALT
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: salt
        - name: IMGPROXY_READ_TIMEOUT
          value: "{{ .Values.readTimeout }}"
        - name: IMGPROXY_WRITE_TIMEOUT
          value: "{{ .Values.writeTimeout }}"
        - name: IMGPROXY_DOWNLOAD_TIMEOUT
          value: "{{ .Values.downloadTimeout }}"
        {{- if .Values.concurrency }}
        - name: IMGPROXY_CONCURRENCY
          value: "{{ .Values.concurrency }}"
        {{- end }}
        {{- if .Values.maxClients }}
        - name: IMGPROXY_MAX_CLIENTS
          value: "{{ .Values.maxClients }}"
        {{- end }}
        - name: IMGPROXY_TTL
          value: "{{ .Values.ttl }}"
        - name: IMGPROXY_USER_AGENT
          value: "{{ .Values.userAgent }}"
        {{- if .Values.useEtag }}
        - name: IMGPROXY_USE_ETAG
          value: "true"
        {{- end }}
        {{- if .Values.localFileSystemRoot }}
        - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
          value: "{{ .Values.localFileSystemRoot }}"
        {{- end }}
        {{- if .Values.allowOrigin }}
        - name: IMGPROXY_ALLOW_ORIGIN
          value: "{{ .Values.allowOrigin }}"
        {{- end }}
        - name: IMGPROXY_MAX_SRC_RESOLUTION
          value: "{{ .Values.maxSrcResolution }}"
        - name: IMGPROXY_MAX_GIF_FRAMES
          value: "{{ .Values.maxGifFrames }}"
        {{- if .Values.secret }}
        - name: IMGPROXY_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: secret
        {{- end }}
        {{- if .Values.ignoreSslVerification}}
        - name: IMGPROXY_IGNORE_SSL_VERIFICATION
          value: "true"
        {{- end }}
        - name: IMGPROXY_QUALITY
          value: "{{ .Values.quality }}"
        - name: IMGPROXY_GZIP_COMPRESSION
          value: "{{ .Values.gzipCompression }}"
        {{- if .Values.jpegProgressive}}
        - name: IMGPROXY_JPEG_PROGRESSIVE
          value: "true"
        {{- end }}
        {{- if .Values.pngInterlaced }}
        - name: IMGPROXY_PNG_INTERLACED
          value: "true"
        {{- end }}
        {{- if .Values.enableWebpDetection }}
        - name: IMGPROXY_ENABLE_WEBP_DETECTION
          value: "true"
        {{- end }}
        {{- if .Values.enforceWebp }}
        - name: IMGPROXY_ENFORCE_WEBP
          value: "true"
        {{- end }}
        {{- if .Values.enableClientHints }}
        - name: IMGPROXY_ENABLE_CLIENT_HINTS
          value: "true"
        {{- end }}
        - name: IMGPROXY_WATERMARK_DATA
          value: "{{ .Values.watermarkData }}"
        - name: IMGPROXY_WATERMARK_PATH
          value: "{{ .Values.watermarkPath }}"
        - name: IMGPROXY_WATERMARK_URL
          value: "{{ .Values.watermarkUrl }}"
        - name: IMGPROXY_WATERMARK_OPACITY
          value: "{{ .Values.watermarkOpacity }}"
        - name: IMGPROXY_PRESETS
          value: "{{ .Values.presets }}"

        {{- if .Values.useS3 }}
        - name: IMGPROXY_USE_S3
          value: "true"
        {{- if .Values.awsKey }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: awsKey
        {{- end }}
        {{- if .Values.awsSecret }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: awsSecret
        {{- end }}
        - name: IMGPROXY_S3_REGION
          value: "{{ .Values.awsRegion }}"
        - name: IMGPROXY_S3_ENDPOINT
          value: "{{ .Values.s3Endpoint }}"
        {{- end }}

        {{- if .Values.gcsKey }}
        - name: IMGPROXY_GCS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: gcsKey
        {{- end }}

        {{- if .Values.newRelicKey }}
        - name: IMGPROXY_NEW_RELIC_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: newRelicKey
        - name: IMGPROXY_NEW_RELIC_APP_NAME
          value: "{{ .Values.newRelicAppName }}"
        {{- end }}

        {{- if .Values.enablePrometheus }}
        - name: IMGPROXY_PROMETHEUS_BIND
          value: ":8081"
        {{- end }}

        {{- if .Values.bugsnagKey }}
        - name: IMGPROXY_BUGSNAG_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: bugsnagKey
        - name: IMGPROXY_BUGSNAG_STAGE
          value: "{{ .Values.bugsnagStage }}"
        {{- end }}

        {{- if .Values.honeybadgerKey }}
        - name: IMGPROXY_HONEYBADGER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "imgproxy.fullname" . }}-secrets
              key: honeybadgerKey
        - name: IMGPROXY_HONEYBADGER_ENV
          value: "{{ .Values.honeybadgerEnv }}"
        {{- end }}

        {{- if .Values.baseUrl }}
        - name: IMGPROXY_BASE_URL
          value: "{{ .Values.baseUrl }}"
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
            httpHeaders:
            - name: Authorization
              value: Bearer {{ .Values.secret }}
          {{- with .Values.readinessProbe }}
          initialDelaySeconds: {{ .initialDelaySeconds | default 10 }}
          timeoutSeconds: {{ .timeoutSeconds | default 5}}
          successThreshold: {{ .successThreshold | default 1 }}
          failureThreshold: {{ .failureThreshold | default 5 }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
            httpHeaders:
            - name: Authorization
              value: Bearer {{ .Values.secret }}
          {{- with .Values.livenessProbe }}
          initialDelaySeconds: {{ .initialDelaySeconds | default 50 }}
          timeoutSeconds: {{ .timeoutSeconds | default 5}}
          successThreshold: {{ .successThreshold | default 1 }}
          failureThreshold: {{ .failureThreshold | default 5 }}
          {{- end }}
