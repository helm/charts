---
# How many instances of imgproxy you desire to spin up.
replicaCount: 1

# A node selector label.
nodeSelector: {}

# Docker image repository, tag and a policy for Kubernetes to pull it.
image:
  repo: darthsim/imgproxy
  tag: v2.1.0
  pullPolicy: IfNotPresent

imagePullSecrets: {}
  # registry: ""
  # username: ""
  # password: ""

# Kubernetes API version to use for imgproxy Deployment
apiVersion: apps/v1

# Set kubernetes specific resource limits
resources: {}
  # limits:
  #   cpu: 700m
  #   memory: 700Mi
  # requests:
  #   cpu: 700m
  #   memory: 700Mi

# Which port should imgproxy and its Kubernetes service listen
httpPort: 80

# Kubernetes service type
serviceType: "ClusterIP"

# Timeuouts and counters options for Liveness & Readiness probes for imgproxy
# Kubernets Deployment
readinessProbe:
  initialDelaySeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
livenessProbe:
  initialDelaySeconds: 50
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# Configuration parameters for Ingress resource
ingress:
  enabled: false
  tls: false
  acme: false
  host: "example.com"
  annotations: {}
  #   nginx.ingress.kubernetes.io/proxy-body-size: "32m"

# TLS key & certificate if tls is enable & acme is disabled for Ingress resource.
tls: {}
  # privateKey: ""
  # certificate: ""

# Hex-encoded key for URL encoding. CHANGE IT!!!!
key: 1b147116e57d9e06df3696b21260169902fe201ccdb9715267999176ccbfaae6f2c2b75b78110d0287643d98cde143e7a3f98a46ec825a1ab7ea10af426c2436

# Hex-encoded salt for URL encoding. CHANGE IT!!!!
salt: 1e4483006c56f05f1b42af2f2b61765f64b8a074bf993922dd5b4bca78f49280683beb368308b7f76d522027b071a25e6d4b26138686b43e1faa4be4c9b674ea

# The maximum duration (in seconds) for reading the entire image request, including the body
readTimeout: 10

# The maximum duration (in seconds) for writing the response
writeTimeout: 10

# The maximum duration (in seconds) for downloading the source image
downloadTimeout: 5

# The maximum number of image requests to be processed simultaneously. Default: double number of CPU cores
concurrency: ""

# The maximum number of simultaneous active connections. Default: concurrency * 10
maxClients: ""

# Duration in seconds sent in Expires and Cache-Control: max-age headers.
ttl: 3600

# User-Agent header that will be sent with source image request. Default: imgproxy/%current_version
userAgent: ""

# When true, enables using ETag header for the cache control|`false`|
useEtag: false

# Root of the local filesystem. See [Serving local files](https://github.com/darthsim/imgproxy#serving-local-files). Keep empty to disable serving of local files.
localFileSystemRoot: false

# When set, enables CORS headers with provided origin. CORS headers are disabled by default.
allowOrigin: ""

# The maximum resolution of the source image, in megapixels. Images with larger real size will be rejected
maxSrcResolution: "16.8"

# The maximum of animated GIF frames to being processed
maxGifFrames: 1

# The authorization token. If specified, request should contain the `Authorization: Bearer %secret%` header
secret: ""

# When true, disables SSL verification
ignoreSslVerification: false

# Quality of the resulting image, percentage
quality: 80

# GZip compression level
gzipCompression: 5

# When true, enables progressive compression of JPEG
jpegProgressive: false

# When true, enables interlaced compression of PNG
pngInterlaced: false

# Enables WebP support detection. When the file extension is omitted in the imgproxy URL and browser supports WebP, imgproxy will use it as the resulting format
enableWebpDetection`: false

# Enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL
enforceWebp`: false

# Enables Client Hints support when the width is ommited for automatic responsive images
enableClientHints: false

# Base64-encoded image data
watermarkData: ""

# Path to the locally stored image
watermarkPath: ""

# Watermark image URL
watermarkUrl: ""

# Watermark base opacity
watermarkOpacity: 1

# Set of preset definitions, comma-divided
presets: ""

# When true, enables image fetching from Amazon S3 buckets
useS3: false

# AWS key
awsKey: ""

# AWS secret
awsSecret: ""

# AWS region
awsRegion: ""

# Custom S3 endpoint to being used by imgproxy
s3Endpoint: ""

# Google Cloud JSON key. When set, enables image fetching from Google Cloud Storage buckets
gcsKey: ""

# New Relic license key
newRelicKey: ""

# New Relic application name. Default: imgproxy
newRelicAppName: ""

# Enables Prometheus metrics
enablePrometheus: false

# Bugsnag API key. When provided, enables errors reporting to Bugsnag
bugsnagKey: ""

# Bugsnag stage to report to. Default: production
bugsnagStage: ""

# Honeybadger API key. When provided, enables errors reporting to Honeybadger
honeybadgerKey: ""

# Honeybadger env to report to. Default: production
honeybadgerEnv: ""

# Base URL part which will be added to every requestsd image URL. For example, if base URL is `http://example.com/images` and `/path/to/image.png` is requested, imgproxy will download the image from `http://example.com/images/path/to/image.png`
baseUrl: ""
