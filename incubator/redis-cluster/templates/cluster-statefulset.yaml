{{- $fullName := include "redis-cluster.fullname" . }}
{{- $shards := int (toString .Values.shards) }}
{{- $root := . }}
{{- range $i := until $shards }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "redis-cluster.fullname" $root }}-shard{{ $i }}
  labels:
    {{ template "redis-cluster.fullname" $root }}: shard{{ $i }}
{{ include "labels.standard" $root | indent 4 }}
spec:
  selector:
    matchLabels:
      release: {{ $root.Release.Name }}
      app: {{ template "redis-cluster.name" $root }}
  serviceName: {{ template "redis-cluster.fullname" $root }}
  replicas: {{ add (int (toString $root.Values.shardReplicas)) 1 }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        release: {{ $root.Release.Name }}
        app: {{ template "redis-cluster.name" $root }}
        {{ template "redis-cluster.fullname" $root }}: shard{{ $i }}
        {{- range $key, $value := $root.Values.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if $root.Values.nodeSelector }}
      nodeSelector:
{{ toYaml $root.Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if $root.Values.tolerations }}
      tolerations:
{{ toYaml $root.Values.tolerations | indent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          {{- if $root.Values.hardAntiAffinity }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: {{ template "redis-cluster.name" $root }}
                  release: {{ $root.Release.Name }}
                  {{ template "redis-cluster.fullname" $root }}: shard{{ $i }}
              topologyKey: kubernetes.io/hostname
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: {{ template "redis-cluster.name" $root }}
                  release: {{ $root.Release.Name }}
                  {{ template "redis-cluster.fullname" $root }}: shard{{ $i }}
              topologyKey: kubernetes.io/hostname
          {{- end }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app:  {{ template "redis-cluster.name" $root }}
                    release: {{ $root.Release.Name }}
                    {{ template "redis-cluster.fullname" $root }}: shard{{ $i }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      securityContext:
{{ toYaml $root.Values.securityContext | indent 8 }}
      initContainers:
      {{- if $root.Values.sysctl.enabled }}
      - name: init-sysctl
        image: {{ $root.Values.sysctl.image }}:{{ $root.Values.sysctl.tag }}
        imagePullPolicy: {{ $root.Values.sysctl.pullPolicy }}
        {{- if $root.Values.sysctl.mountHostSys }}
        volumeMounts:
        - name: host-sys
          mountPath: /host-sys
        {{- end }}
        command:
{{ toYaml $root.Values.sysctl.command | indent 10 }}
        securityContext:
          runAsNonRoot: false
          privileged: true
          runAsUser: 0
      {{- end }}
      - name: init-config
        image: {{ $root.Values.image.name }}:{{ $root.Values.image.tag }}
        imagePullPolicy: {{ $root.Values.image.pullPolicy }}
        command: 
        - sh
        - "-c"
        - |
          #!/bin/sh
          set -eu
    
          CONF_DIR="/data/conf"
          mkdir -p ${CONF_DIR}
          cp /configmap/* ${CONF_DIR}
          INDEX="${HOSTNAME##*-}"
          SERVICE="{{ template "redis-cluster.fullname" $root }}-shard{{ $i }}"
          timeout=0
          ANNOUNCE_IP=$(getent hosts "$SERVICE-announce-$INDEX" | awk '{ print $1 }')
          while [ $timeout -lt 300 ]
          do
            if [ "$ANNOUNCE_IP" = "" ];then
              ANNOUNCE_IP=$(getent hosts "$SERVICE-announce-$INDEX" | awk '{ print $1 }')
            else
              break
            fi
            timeout=`expr $timeout + 1`
            sleep 1
          done
          if [ "$ANNOUNCE_IP" = "" ];then
            echo "ERROR: Can not get ip for service $SERVICE."
            exit 1
          fi
          echo "# Add cluster-announce-ip automatically when pod start." >>$CONF_DIR/redis.conf
          echo "cluster-announce-ip $ANNOUNCE_IP" >>$CONF_DIR/redis.conf
          {{- if $root.Values.auth }}
          if [ "$AUTH" = "" ];then
            echo "ERROR: The cluster requires authentication, but no password was set."
            exit 1
          else
            echo "requirepass $AUTH" >>$CONF_DIR/redis.conf
          fi
          {{ else }}
          echo "protected-mode no" >>$CONF_DIR/redis.conf
          {{- end }}
        env:
        {{- if $root.Values.auth }}
        - name: AUTH
          valueFrom:
            secretKeyRef:
              name: {{ template "redis-cluster.fullname" $root }}
              key: auth
        {{- end }}  
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /configmap
          name: config
      containers:
      - name: redis
        image: {{ $root.Values.image.name }}:{{ $root.Values.image.tag }}
        imagePullPolicy: {{ $root.Values.image.pullPolicy }}
        command:
        - redis-server 
        - "/data/conf/redis.conf"
        livenessProbe:
          tcpSocket:
            port: {{ $root.Values.redis.port }}
          initialDelaySeconds: 15
        resources:
{{ toYaml $root.Values.redis.resources | indent 10 }}
        ports:
        - name: redis
          containerPort: 6379
        - name: cluster-bus
          containerPort: 16379
        volumeMounts:
        - mountPath: /data
          name: data
{{- if $root.Values.priorityClassName }}
      priorityClassName: {{ $root.Values.priorityClassName }}
{{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "redis-cluster.fullname" $root }}-configmap
      {{- if $root.Values.sysctl.mountHostSys }}
      - name: host-sys
        hostPath:
          path: /sys
      {{- end }}
{{- if $root.Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
      {{- range $key, $value := $root.Values.persistentVolume.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
      {{- range $root.Values.persistentVolume.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ $root.Values.persistentVolume.size | quote }}
    {{- if $root.Values.persistentVolume.storageClass }}
    {{- if (eq "-" $root.Values.persistentVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ $root.Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- end }}
{{- else }}
      - name: data
        emptyDir: {}
{{- end }}
{{- end }}