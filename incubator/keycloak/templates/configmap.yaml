{{- $highAvailability := gt (int .Values.keycloak.replicas) 1 -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "keycloak.fullname" . }}
  labels:
    app: {{ template "keycloak.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
{{- if .Values.keycloak.persistence.deployPostgres }}
  wait_for_postgresql.sh: |
    #!/usr/bin/env bash

    set -eu

    pod_labels="${1?Please specify PostgreSQL labels}"
    max_retries=30
    retry_count=0
    sleep_secs=2
    ready_pods=

    echo 'Polling for PostgreSQL readiness...'

    while [ -z "$ready_pods" ] && [ "$retry_count" -lt "$max_retries" ]; do
        ready_pods=$(kubectl get pods -l "$pod_labels" -o jsonpath="{.items[*].status.containerStatuses[?(@.ready==true)].name}")
        retry_count=$((retry_count + 1))
        sleep "$sleep_secs"
    done

    if [ -z "$ready_pods" ]; then
        echo "ERROR: Timeout waiting for PostgreSQL to start up." >&2
        exit 1
    fi

    echo "PostgreSQL ready!"
{{- end }}

  keycloak.sh: |
    #!/usr/bin/env bash

    set -eu

    /opt/jboss/keycloak/bin/jboss-cli.sh --file=/scripts/keycloak.cli

    args=(-b 0.0.0.0{{ if $highAvailability }} --server-config standalone-ha.xml{{ end }})

    exec /opt/jboss/docker-entrypoint.sh "${args[@]}"
    exit "$?"

  keycloak.cli: |
    embed-server{{ if $highAvailability }} --server-config=standalone-ha.xml{{ end }} --std-out=echo

{{- $cli := .Values.keycloak.cli }}

{{ $cli.nodeIdentifier | indent 4 }}

{{ $cli.logging | indent 4 }}

{{ $cli.reverseProxy | indent 4 }}

{{- if $highAvailability }}
{{ $cli.discovery | indent 4 }}
{{- end }}

{{- if $cli.custom }}
{{ $cli.custom | indent 4 }}
{{- end }}

    stop-embedded-server
